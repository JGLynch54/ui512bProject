Microsoft (R) Macro Assembler (x64) Version 14.44.35213.0   08/02/25 22:18:07
ui512b.asm						     Page 1 - 1


				;
				;			ui512b
				;
				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;			File:			ui512b.asm
				;			Author:			John G. Lynch
				;			Legal:			Copyright @2024, per MIT License below
				;			Date:			June 11, 2024
				;
				;			Notes:
				;				ui512 is a small project to provide basic operations for a variable type of unsigned 512 bit integer.
				;
				;				ui512a provides basic operations: zero, copy, compare, add, subtract.
				;				ui512b provides basic bit-oriented operations: shift left, shift right, and, or, not, least significant bit and most significant bit.
				;				ui512md provides multiply and divide.
				;
				;				It is written in assembly language, using the MASM (ml64) assembler provided as an option within Visual Studio.
				;				(currently using VS Community 2022 17.14.10)
				;
				;				It provides external signatures that allow linkage to C and C++ programs,
				;				where a shell/wrapper could encapsulate the methods as part of an object.
				;
				;				It has assembly time options directing the use of Intel processor extensions: AVX4, AVX2, SIMD, or none:
				;				(Z (512), Y (256), or X (128) registers, or regular Q (64bit)).
				;
				;				If processor extensions are used, the caller must align the variables declared and passed
				;				on the appropriate byte boundary (e.g. align as 64 for 512)
				;
				;				This module is very light-weight (less than 2K bytes) and relatively fast,
				;				but is not intended for all processor types or all environments. 
				;
				;				Use for private (hobbyist), or instructional, or as an example for more ambitious projects.
				;
				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;
				;			MIT License
				;
				;			Copyright (c) 2024 John G. Lynch
				;
				;				Permission is hereby granted, free of charge, to any person obtaining a copy
				;				of this software and associated documentation files (the "Software"), to deal
				;				in the Software without restriction, including without limitation the rights
				;				to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
				;				copies of the Software, and to permit persons to whom the Software is
				;				furnished to do so, subject to the following conditions:
				;
				;				The above copyright notice and this permission notice shall be included in all
				;				copies or substantial portions of the Software.
				;
				;				THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
				;				IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
				;				FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
				;				AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
				;				LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
				;				OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
				;				SOFTWARE.
				;
				;--------------------------------------------------------------------------------------------------------------------------------------------------------------

								INCLUDE			ui512aMacros.inc
			      C 
			      C .NOLIST
			      C .LIST
			      C IFNDEF			ui512aMacros_INC
 = 1			      C ui512aMacros_INC EQU			<1>
			      C 
			      C ;           header file equivalent extern declarations
			      C ;			EXTERN "C" signatures (from ui512a.asm)
			      C 
			      C ;	// void zero_u ( u64* destarr ); 
			      C ;	// fill supplied 512bit (8 QWORDS) with zero
			      C EXTERNDEF		zero_u:PROC
			      C 
			      C ;	// void copy_u ( u64* destarr, u64* srcarr );
			      C ;	// copy supplied 512bit (8 QWORDS) source to supplied destination
			      C EXTERNDEF		copy_u:PROC
			      C 
			      C ;	// void set_uT64 ( u64* destarr, u64 value );
			      C ;	// set supplied destination 512 bit to supplied u64 value
			      C EXTERNDEF		set_uT64:PROC
			      C 
			      C ;	// s16 compare_u ( u64* lh_op, u64* rh_op );
			      C ;	// compare supplied 512bit (8 QWORDS) LH operand to supplied RH operand
			      C ;	// returns: (0) for equal, -1 for less than, 1 for greater than (logical, unsigned compare)
			      C EXTERNDEF		compare_u:PROC
			      C 
			      C ;	// s16 compare_uT64 ( u64* lh_op, u64 rh_op );
			      C ;	// compare supplied 512bit (8 QWORDS) LH operand to supplied 64bit RH operand (value)
			      C ;	// returns: (0) for equal, -1 for less than, 1 for greater than (logical, unsigned compare)
			      C EXTERNDEF		compare_uT64:PROC
			      C 
			      C ;	// s16 add_u ( u64* sum, u64* addend1, u64* addend2 );
			      C ;	// add supplied 512bit (8 QWORDS) sources, place in supplied destination
			      C ;	// returns: zero for no carry, 1 for carry (overflow)
			      C EXTERNDEF		add_u:PROC
			      C 
			      C ;	// s16 add_uT64 ( u64* sum, u64* addend1, u64 addend2 );
			      C ;	// add 64bit QWORD (value) to supplied 512bit (8 QWORDS), place in supplied destination
			      C ;	// returns: zero for no carry, 1 for carry (overflow)
			      C EXTERNDEF		add_uT64:PROC
			      C 
			      C ;	// s16 sub_u ( u64* difference, u64* left operand, u64* right operand );
			      C ;	// subtract supplied 512bit (8 QWORDS) RH OP from LH OP giving difference in destination
			      C ;	// returns: zero for no borrow, 1 for borrow (underflow)
			      C EXTERNDEF		sub_u:PROC
			      C 
			      C ;	// s16 sub_uT64( u64* difference, u64* left operand, u64 right operand );
			      C ;	// subtract supplied 64 bit right hand (64 bit value) op from left hand (512 bit) giving difference
			      C ;	// returns: zero for no borrow, 1 for borrow (underflow)
			      C EXTERNDEF		sub_uT64:PROC
			      C 
			      C ;
			      C ;--------------------------------------------------------------------------------------------------------------------------------------------------------------
			      C ;			EXTERNDEF		reg_verify:PROC	;	void reg_verify ( u64* regstruct)
			      C ;			reg_verify		-	copy non-volitile regs into callers struct of nine qwords) intended for uit tests to verify non-volitile regs are not changed
			      C ;			Prototype:		-	void reg_verify( uu64* regstruct);
			      C ;			regstruct		-	Address of 9 QWORDS in a struct where regs will be copied (in RCX)
			      C ; //			reg_verify		-	save non-volatile regs for verification (debug)
			      C ; //			Prototype		-	void reg_verify ( u64* reg struct)
			      C EXTERNDEF		reg_verify:PROC	;	void reg_verify ( u64* reg struct)
			      C 
			      C ;			Configuration choices
 = 00000001		      C __UseZ			EQU				1									; Use AVX4 processor features (512 bit registers and instructions)
 = 00000000		      C __UseY			EQU				0									; Use AVX2 processor features (256 bit registers and instructions)
 = 00000000		      C __UseX			EQU				0									; Use SIMD/SSE processor features (128 bit registers and instructions)
 = 00000000		      C __UseQ			EQU				0									; Do not use extensions, use standard x64 bit registers and instructions
			      C ;
 = 00000001		      C __VerifyRegs	EQU				1									; in debug mode, or with unit tests, define routine to verofy non-volitile regs 
 = 00000000		      C __CheckAlign	EQU				0									; User is expected to pass arguments aligned on 64 byte boundaries, 
			      C 																	; This setting enforces that with a check. It should not be necessary, but included to help debugging
			      C 
			      C ;           Some coding shortcuts
 = ZMMWORD PTR		      C ZM_PTR			EQU				ZMMWORD PTR
 = YMMWORD PTR		      C YM_PTR			EQU				YMMWORD PTR
 = XMMWORD PTR		      C XM_PTR			EQU				XMMWORD PTR
 = QWORD PTR		      C Q_PTR			EQU				QWORD PTR
 = DWORD PTR		      C D_PTR			EQU				DWORD PTR
 = WORD PTR		      C W_PTR			EQU				WORD PTR
 = BYTE PTR		      C B_PTR			EQU				BYTE PTR
 = DWORD BCST		      C m32BCST			EQU				DWORD BCST
 = QWORD BCST		      C m64BCST			EQU				QWORD BCST
			      C 
			      C ;			mask codes (for compares using instructions like VPCMPUQ)
 = 00000000		      C CPEQ			EQU				0
 = 00000001		      C CPLT			EQU				1
 = 00000002		      C CPLE			EQU				2
 = 00000003		      C CPFALSE			EQU				3
 = 00000004		      C CPNE			EQU				4
 = 00000005		      C CPGE			EQU				5
 = 00000006		      C CPGT			EQU				6
 = 00000007		      C CPTRUE			EQU				7
			      C 
			      C ;			Mask values (for k reg) used to select particulare QWORDS from X, Y, or Z simd regs
 = 00000001		      C MaskBit0		EQU				B_PTR [ 00000001b ]
 = 00000002		      C MaskBit1		EQU				B_PTR [ 00000010b ]
 = 00000004		      C MaskBit2		EQU				B_PTR [ 00000100b ]
 = 00000008		      C MaskBit3		EQU				B_PTR [ 00001000b ]
 = 00000010		      C MaskBit4		EQU				B_PTR [ 00010000b ]
 = 00000020		      C MaskBit5		EQU				B_PTR [ 00100000b ]
 = 00000040		      C MaskBit6		EQU				B_PTR [ 01000000b ]
 = 00000080		      C MaskBit7		EQU				B_PTR [ 10000000b ]
			      C 
			      C ;			Another way to get masks
			      C kMask			RECORD			b8:1, b7:1, b6:1, b5:1, b4:1, b3:1, b2:1, b1:1, b0:1
			      C ;==========================================================================================
			      C ;           Notes on x64 calling conventions        aka "fast call"
			      C ; ref: https://learn.microsoft.com/en-us/cpp/build/x64-calling-convention?view=msvc-170
			      C ; The first four parameters are passed in registers: RCX, RDX, R8, R9 if integer or address
			      C ; if floating point XMM0L, XMM1L, XMM2L, XMM3L
			      C ; return (if any) is in EAX
			      C ;===========================================================================================
			      C ;
			      C ;===========================================================================================
			      C ; RAX, RCX, RDX, R8, R9, R10, R11 are considered volatile, and do not need to be saved
			      C ; XMM0, YMM0, ZMM0 and  ..1, ..2, ..3, ..4, and ..5 are considered volatile,
			      C ;	and do not need to be saved
			      C ;  ZMM16 to ZMM31: volatile, also do not need to be zeroed to resume full clock speeds
			      C ;
			      C ; R12, R13, R14, R15, RDI, RSI, RBX, RBP, RSP are non-volatile and if used, must be restored
			      C ; XMM, YMM, and ZMM ..6 thru 15 are non-volatile and if used, must be restored
			      C ;
			      C ; A "leaf" function is one that does not call and does not change non volatile registers
			      C ; leaf functionss therefore do not need frame, prolog or epilog
			      C ;
			      C ;===========================================================================================
			      C 
			      C ;===========================================================================================
			      C ; Selected macros from "macamd64.inc" (c) Microsoft Corporation
			      C ;	These macros generate .xdata and .pdata entries in the executable image file.
			      C ;	The entries assist in exception and debugging; helping 'unwind' operations.
			      C ;	Only a few macros are included, and are reformatted to match coding style:
			      C ;	indents and captitaliztion.
			      C ;===========================================================================================
			      C 
			      C ;++
			      C ;
			      C ; END_PROLOGUE
			      C ;
			      C ; Macro Description:
			      C ;
			      C ;   This macro marks the end of the prologue.  This must appear after all
			      C ;   of the prologue directives in a nested function.
			      C ;
			      C ; Arguments:
			      C ;
			      C ;   None.
			      C ;
			      C ;--
			      C 
			      C End_Prolog		MACRO
			      C 				.ENDPROLOG
			      C 				 ENDM
			      C 
			      C ;++
			      C ;
			      C ; LEAF_ENTRY <Name>, <Section>, <NoPad>
			      C ;
			      C ; Macro Description:
			      C ;
			      C ;   This macro indicates the beginning of a leaf function.
			      C ;
			      C ;   A leaf function is one that DOES NOT:
			      C ;
			      C ;   - manipulate non-volatile registers
			      C ;   - manipulate the stack pointer
			      C ;   - call other functions
			      C ;   - reference an exception handler
			      C ;   - contain a prologue
			      C ;   - have any unwind data associated with it
			      C ;
			      C ; Arguments:
			      C ;
			      C ;   Name - Supplies the name of the function
			      C ;
			      C ;   Section - Supplies the name of the section within which the function
			      C ;             is to appear
			      C ;
			      C ;   NoPad - If present, indicates that the function should not be prefixed
			      C ;           with 6 bytes of padding.  This is for internal use only - the
			      C ;           calling standard dictates that functions (nested and leaf) must
			      C ;           be prefixed with padding.
			      C ;
			      C ;--
			      C 
			      C Leaf_Entry		MACRO			Name, Section
			      C Section			SEGMENT			PARA 'CODE'
			      C 				DB				6 DUP (0cch)
			      C 				ALIGN			16
			      C 				PUBLIC			Name
			      C Name			PROC			FRAME
			      C 				End_Prolog
			      C 				ENDM
			      C 
			      C ;++
			      C ;
			      C ; LEAF_END <Name>, <Section>
			      C ;
			      C ; Macro Description:
			      C ;
			      C ;   This macro indicates the end of a leaf function.  It must be paired
			      C ;   with a LEAF_ENTRY macro that includes matching Name and Section
			      C ;   parameters.
			      C ;
			      C ; Arguments:
			      C ;
			      C ;   Name - Supplies the name of the function.  Must match that supplied to
			      C ;          the corresponding LEAF_ENTRY macro.
			      C ;
			      C ;   Section - Supplies the name of the section within which the function
			      C ;             is to appear.  Must match that supplied to the corresponding
			      C ;             LEAF_ENTRY macro.
			      C ;
			      C ;--
			      C 
			      C Leaf_End		MACRO			Name, Section
			      C Name			ENDP
			      C Section			ENDS
			      C 				ENDM
			      C 
			      C ;===========================================================================================
			      C ;          Local macros
			      C ;===========================================================================================
			      C 
			      C ;
			      C ;			Test passed variable addresses for 64 byte alignment
			      C ;			Note: Better performance if this is off, but for debugging, maybe have it on
			      C ;
			      C CheckAlign		MACRO			Raddr
			      C 				LOCAL			ok
			      C 	IF	__CheckAlign
			      C 				TEST			Raddr, 63							; Is specified param aligned 64?
			      C 				JZ				ok									; Yes, passes test, continue
			      C 				INT				13									; No? fails, break (can substitute other exception handling)
			      C ok:
			      C 	ENDIF
			      C 				ENDM
			      C 				
			      C IF	__VerifyRegs
			      C 
			      C VerifyRegs		MACRO
			      C 				Leaf_Entry		reg_verify, ui512
			      C 				MOV				Q_PTR [ RCX ] [ 0 * 8 ], R12
			      C 				MOV				Q_PTR [ RCX ] [ 1 * 8 ], R13
			      C 				MOV				Q_PTR [ RCX ] [ 2 * 8 ], R14
			      C 				MOV				Q_PTR [ RCX ] [ 3 * 8 ], R15
			      C 				MOV				Q_PTR [ RCX ] [ 4 * 8 ], RDI
			      C 				MOV				Q_PTR [ RCX ] [ 5 * 8 ], RSI
			      C 				MOV				Q_PTR [ RCX ] [ 6 * 8 ], RBX
			      C 				MOV				Q_PTR [ RCX ] [ 7 * 8 ], RBP
			      C 				MOV				Q_PTR [ RCX ] [ 8 * 8 ], RSP
			      C 				RET
			      C 				Leaf_End		reg_verify, ui512
			      C 				ENDM
			      C ENDIF
			      C 
			      C MemConstants	MACRO
			      C 
			      C qOnes			QWORD           8 DUP (0ffffffffffffffffh)
			      C ;
			      C zeroQ			DQ				0
			      C mskHex100		DD				0100h
			      C ;		Return codes commonly used.			
			      C ret0			DD				0								
			      C ret1			DD				1
			      C ret_1			DD				-1
			      C ;		Masks commonly used
			      C mskAll8			DB				255
			      C mskB0			DB				1
			      C mskB1			DB				2
			      C mskB2			DB				4
			      C mskB3			DB				8
			      C mskB4			DB				16
			      C mskB5			DB				32
			      C mskB6			DB				64
			      C mskB7			DB				128
			      C 
			      C 				ENDM
			      C 
			      C ;
			      C ;			Zero a 512 bit destination, conditional assembly based on configuration parameters
			      C ;
			      C Zero512			MACRO			dest:REQ
			      C 	IF		__UseZ
			      C 				CheckAlign		dest
			      C 				VPXORQ			ZMM31, ZMM31, ZMM31
			      C 				VMOVDQA64		ZM_PTR [ dest ], ZMM31
			      C 	ELSEIF	__UseY
			      C 				CheckAlign		dest
			      C 				VPXORQ			YMM4, YMM4, YMM4
			      C 				FOR				idx, < 0, 4 >
			      C 				VMOVDQA64		YM_PTR [ dest ] [ idx * 8 ], YMM4
			      C 				ENDM
			      C 	ELSEIF	__UseX
			      C 				CheckAlign		dest
			      C 				PXOR			XMM4, XMM4
			      C 				FOR				idx, < 0, 2, 4, 6 >
			      C 				MOVDQA			XM_PTR [ dest ] [ idx * 8 ], XMM4
			      C 				ENDM		
			      C 	ELSE
			      C 				XOR				RAX, RAX
			      C 				FOR				idx,  < 0, 1, 2, 3, 4, 5, 6, 7 >
			      C 				MOV				Q_PTR [ dest ] [ idx * 8 ], RAX
			      C 				ENDM
			      C 	ENDIF
			      C 				ENDM
			      C 
			      C ;
			      C ;			Zero a 512 bit destination, always use Q_PTR, avoids clock penalty from using SIMD
			      C ;
			      C Zero512Q		MACRO			dest:REQ
			      C 				XOR				RAX, RAX
			      C 				FOR				idx,  < 0, 1, 2, 3, 4, 5, 6, 7 >
			      C 				MOV				Q_PTR [ dest ] [ idx * 8 ], RAX
			      C 				ENDM
			      C 
			      C 				ENDM
			      C ;
			      C ;			Copy a 512 bit source to destination, conditional assembly based on configuration parameters
			      C ;
			      C Copy512			MACRO			dest:REQ, src:REQ
			      C 	IF		__UseZ 
			      C 				CheckAlign		dest
			      C 				CheckAlign		src
			      C 				VMOVDQA64		ZMM31, ZM_PTR [ src ]
			      C 				VMOVDQA64		ZM_PTR [ dest ], ZMM31
			      C 	ELSEIF	__UseY
			      C 				CheckAlign		dest
			      C 				CheckAlign		src
			      C 				VMOVDQA64		YMM4, YM_PTR [ src + 0 * 8 ]
			      C 				VMOVDQA64		YM_PTR [ dest ] [ 0 * 8 ], YMM4	; alternate ymm regs in case pipeline can execute next without waiting for this.
			      C 				VMOVDQA64		YMM5, YM_PTR [ src ] [ 4 * 8 ]
			      C 				VMOVDQA64		YM_PTR [ dest ] [ 4 * 8 ], YMM5
			      C 	ELSEIF	__UseX
			      C 				CheckAlign		dest
			      C 				CheckAlign		src
			      C 				MOVDQA			XMM4, XM_PTR [ src ] [ 0 * 8 ]
			      C 				MOVDQA			XM_PTR [ dest ] [ 0 * 8 ], XMM4
			      C 				MOVDQA			XMM3, XM_PTR [ src ] [ 2 * 8 ]
			      C 				MOVDQA			XM_PTR [ dest ] [ 2 * 8 ], XMM3
			      C 				MOVDQA			XMM4, XM_PTR [ src ] [ 4 * 8 ]
			      C 				MOVDQA			XM_PTR [ dest ] [ 4 * 8 ], XMM4
			      C 				MOVDQA			XMM3, XM_PTR [ src ] [ 6 * 8 ]
			      C 				MOVDQA			XM_PTR [ dest ] [ 6 * 8 ], XMM3
			      C 	ELSE
			      C 				FOR				idx, < 0, 1, 2, 3, 4, 5, 6, 7 >
			      C 				MOV				RAX, Q_PTR [ src ] [ idx * 8 ]
			      C 				MOV				Q_PTR [ dest ] [ idx * 8 ], RAX
			      C 				ENDM
			      C 	ENDIF
			      C 				ENDM
			      C ;
			      C ;			Copy a 512 bit source to destination, always use Q_PTR, avoids clock penalty from using SIMD
			      C ;
			      C Copy512Q		MACRO			dest:REQ, src:REQ
			      C 				FOR				idx, < 0, 1, 2, 3, 4, 5, 6, 7 >
			      C 				MOV				RAX, Q_PTR [ src ] [ idx * 8 ]
			      C 				MOV				Q_PTR [ dest ] [ idx * 8 ], RAX
			      C 				ENDM
			      C 
			      C 				ENDM
			      C 
			      C ;
			      C ;			Get a GP reg QWORD from within a Z register as specified by mask
			      C ;			Note: RAX, ZMM0 and k1 are used and not restored
			      C ;			Example usage: GetZatIdx R11, ZMM1, MaskBit2 or SetZatIdx ZMM1, R12, [ R9 ]  (where R9 is a bit mask, not an integer index)
			      C ;			Note: These are req to reg ops; no memory fetches (other than instructions from pipeline)
			      C ;
			      C GetZatMask		MACRO			dest, src, mask
			      C 				LEA				RAX,  mask
			      C 				KMOVB			k1, RAX
			      C 				VPCOMPRESSQ		ZMM0 {k1}{z}, src
			      C 				VMOVQ			dest, XMM0
			      C 				ENDM
			      C 
			      C ;
			      C ;			Set a GP Reg QWORD within a Z register as specified by mask
			      C ;			Note: RAX and k1 are used and not restored
			      C ;			Example usage: SetZatIdx ZMM1, R8, MaskBit2
			      C ;			Note: These are req to reg ops; no memory fetches (other than instructions from pipeline)
			      C ;
			      C SetZatMask		MACRO			dest, src, mask
			      C 				LEA				RAX, mask
			      C 				KMOVB			k1, RAX
			      C 				VPBROADCASTQ 	dest {k1}, src
			      C 				ENDM
			      C ENDIF
			      C 
								INCLUDE			ui512bMacros.inc
			      C .nolist
			      C .list
			      C IFNDEF			ui512bMacros_INC
 = 1			      C ui512bMacros_INC EQU		<1>
			      C ;           header file equivalent extern declarations
			      C ;			EXTERN "C" signatures (from ui512b.asm)
			      C 
			      C ;   // void shr_u ( u64* destination, u64* source, u16 bits_to_shift )
			      C ;   // shift supplied source 512bit (8 QWORDS) right, put in destination
			      C EXTERNDEF		shr_u:PROC
			      C 
			      C ;   // void shl_u ( u64* destination, u64* source, u16 bits_to_shift );
			      C ;   // shift supplied source 512bit (8 QWORDS) left, put in destination
			      C EXTERNDEF		shl_u:PROC
			      C 
			      C ;   // void and_u ( u64* destination, u64* lh_op, u64* rh_op );
			      C ;   // logical 'AND' bits in lh_op, rh_op, put result in destination
			      C EXTERNDEF		and_u:PROC
			      C 
			      C ;   // logical 'OR' bits in lh_op, rh_op, put result in destination
			      C ;   // void or_u( u64* destination, u64* lh_op, u64* rh_op);
			      C EXTERNDEF		or_u:PROC
			      C 
			      C ;   // logical 'NOT' bits in source, put result in destination
			      C ;	// void not_u( u64* destination, u64* source);
			      C EXTERNDEF		not_u:PROC
			      C 
			      C ;   // find most significant bit in supplied source 512bit (8 QWORDS)
			      C ;	// s16 msb_u( u64* );
			      C ;   // returns: -1 if no most significant bit, bit number otherwise, bits numbered 0 to 511 inclusive
			      C ;	//	Note:	a returned zero means the significant bit is bit0 of the eighth word of the 512bit source parameter; (the right most bit)
			      C ;	//			a returned 511 means bit63 of the first word(the left most bit);	//	a returned 511 means bit63 of the first word
			      C EXTERNDEF		msb_u:PROC
			      C 
			      C ;   // find least significant bit in supplied source 512bit (8 QWORDS)
			      C ;	// s16 lsb_u( u64* );
			      C ;   // returns: -1 if no least significant bit, bit number otherwise, bits numbered 0 to 511 inclusive
			      C ;	//	Note:	a returned zero means the significant bit is bit0 of the eighth word of the 512bit source parameter; (the right most bit)
			      C ;	//			a returned 511 means bit63 of the first word(the left most bit);	//	a returned 511 means bit63 of the first word
			      C EXTERNDEF		lsb_u:PROC
			      C 
			      C ENDIF
			      C 
								OPTION			casemap:none

 00000000			ui512D			SEGMENT			'DATA'	ALIGN (64)					; Declare a data segment	
								MemConstants										; Generate memory resident constants
 00000000  00000008 [	     1	qOnes			QWORD           8 DUP (0ffffffffffffffffh)
	    FFFFFFFFFFFFFFFF
	   ]
 00000040		     1	zeroQ			DQ				0
	   0000000000000000
 00000048 00000100	     1	mskHex100		DD				0100h
 0000004C 00000000	     1	ret0			DD				0								
 00000050 00000001	     1	ret1			DD				1
 00000054 FFFFFFFF	     1	ret_1			DD				-1
 00000058 FF		     1	mskAll8			DB				255
 00000059 01		     1	mskB0			DB				1
 0000005A 02		     1	mskB1			DB				2
 0000005B 04		     1	mskB2			DB				4
 0000005C 08		     1	mskB3			DB				8
 0000005D 10		     1	mskB4			DB				16
 0000005E 20		     1	mskB5			DB				32
 0000005F 40		     1	mskB6			DB				64
 00000060 80		     1	mskB7			DB				128
 00000061			ui512D			ENDS												; end of data segment

								VerifyRegs											; if option is turned on (in macros include),
 00000000		     2	ui512			SEGMENT			PARA 'CODE'
 00000000  00000006 [	     2					DB				6 DUP (0cch)
	    CC
	   ]
 00000010		     2	reg_verify			PROC			FRAME
 00000010  4C/ 89 21	     1					MOV				Q_PTR [ RCX ] [ 0 * 8 ], R12
 00000013  4C/ 89 69 08	     1					MOV				Q_PTR [ RCX ] [ 1 * 8 ], R13
 00000017  4C/ 89 71 10	     1					MOV				Q_PTR [ RCX ] [ 2 * 8 ], R14
 0000001B  4C/ 89 79 18	     1					MOV				Q_PTR [ RCX ] [ 3 * 8 ], R15
 0000001F  48/ 89 79 20	     1					MOV				Q_PTR [ RCX ] [ 4 * 8 ], RDI
 00000023  48/ 89 71 28	     1					MOV				Q_PTR [ RCX ] [ 5 * 8 ], RSI
 00000027  48/ 89 59 30	     1					MOV				Q_PTR [ RCX ] [ 6 * 8 ], RBX
 0000002B  48/ 89 69 38	     1					MOV				Q_PTR [ RCX ] [ 7 * 8 ], RBP
 0000002F  48/ 89 61 40	     1					MOV				Q_PTR [ RCX ] [ 8 * 8 ], RSP
 00000033  C3		     1					RET
 00000034		     2	reg_verify			ENDP
 00000034		     2	ui512			ENDS
																					; generate a debug routine for register integrity validation
				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;			shr_u		-	shift supplied source 512bit (8 QWORDS) right, put in destination
				;			Prototype:		void shr_u( u64* destination, u64* source, u32 bits_to_shift)
				;			destination	-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RCX)
				;			source		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RDX)
				;			bits		-	Number of bits to shift. Will fill with zeros, truncate those shifted out (in R8W)
				;			returns		-	nothing (0)
				;			Note: unwound loop(s). More instructions, but fewer executed (no loop save, setup, compare loop), faster, fewer regs used

								Leaf_Entry		shr_u, ui512
 00000034		     1	ui512			SEGMENT			PARA 'CODE'
 00000034  00000006 [	     1					DB				6 DUP (0cch)
	    CC
	   ]
 00000040		     1	shr_u			PROC			FRAME
								CheckAlign		RCX
								CheckAlign		RDX

 00000040  66| 41/ 81 F8					CMP				R8W, 512						; handle edge case, shift 512 or more bits
	   0200
 00000046  7C 0D						JL				@F
								Zero512			RCX								; zero destination
 00000048  62 01 85 40/ EF   1					VPXORQ			ZMM31, ZMM31, ZMM31
	   FF
 0000004E  62 61 FD 48/ 7F   1					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
 00000054  C3							RET
 00000055			@@:
 00000055  49/ 81 E0						AND				R8, 511							; ensure no high bits above shift count
	   000001FF
 0000005C  75 12						JNZ				@F								; handle edge case, zero bits to shift
 0000005E  48/ 3B CA						CMP				RCX, RDX
 00000061  74 0C						JE				@@ret							; destination is the same as the source: no copy needed
								Copy512			RCX, RDX						; no shift, just copy (destination, source already in regs)

 00000063  62 61 FD 48/ 6F   1					VMOVDQA64		ZMM31, ZM_PTR [ RDX ]
	   3A
 00000069  62 61 FD 48/ 7F   1					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
 0000006F			@@ret:
 0000006F  C3							RET
 00000070			@@:

					IF	__UseZ
 00000070  62 61 FD 48/ 6F					VMOVDQA64		ZMM31, ZM_PTR [ RDX ]			; load the 8 qwords into zmm reg (note: word order)
	   3A
 00000076  49/ 0F B7 C0						MOVZX			RAX, R8W
 0000007A  66| 83 E0 3F						AND				AX, 03fh						; limit shift count to 63 (shifting bits only here, not words)
 0000007E  74 19						JZ				@F								; if true, must be multiple of 64 bits to shift, no bits, just words to shift
 00000080  62 62 FD 48/ 7C					VPBROADCASTQ	ZMM29, RAX						; Nr bits to shift right
	   E8
 00000086  62 01 9D 40/ EF					VPXORQ			ZMM28, ZMM28, ZMM28				; 
	   E4
 0000008C  62 03 85 40/ 03					VALIGNQ			ZMM30, ZMM31, ZMM28, 7			; shift copy of words left one word (to get low order bits aligned for shift)
	   F4 07
 00000093  62 02 8D 40/ 73					VPSHRDVQ		ZMM31, ZMM30, ZMM29				; shift, concatenating low bits of next word with each word to shift in
	   FD
 00000099			@@:
				; with the bits shifted within the words, if the desired shift is more than 64 bits, word shifts are required
				; verify Nr of word shift is zero to seven, use it as index into jump table; jump to appropriate shift

 00000099  66| 41/ C1 E8					SHR				R8W, 6							; divide Nr bits to shift by 64 giving Nr words to shift (can only be 0-7 based on above validation)
	   06
 0000009E  48/ 8D 05						LEA				RAX, @jt						; address of jump table
	   000000A9 R
 000000A5  42/ FF 24 C0						JMP				Q_PTR [ RAX ] [ R8 * 8 ]		; jump to routine that shifts the appropriate Nr words
 000000A9			@jt:
 000000A9  00000000000000F0 R					QWORD			@@E, @@1, @@2, @@3, @@4, @@5, @@6, @@7
	   00000000000000E9 R
	   00000000000000F7 R
	   0000000000000105 R
	   0000000000000113 R
	   0000000000000121 R
	   000000000000012F R
	   000000000000013D R
 000000E9  62 03 85 40/ 03	@@1:			VALIGNQ			ZMM31, ZMM31, ZMM28, 7			; shifts words in ZMM31 right 7, fills with zero, resulting seven plus filled zero to ZMM31
	   FC 07
 000000F0  62 61 FD 48/ 7F	@@E:			VMOVDQA64		ZM_PTR [ RCX ], ZMM31			; store result at callers destination
	   39
 000000F6  C3							RET

 000000F7  62 03 85 40/ 03	@@2:			VALIGNQ			ZMM31, ZMM31, ZMM28, 6
	   FC 06
 000000FE  62 61 FD 48/ 7F					VMOVDQA64		ZM_PTR [ RCX ], ZMM31			; store result at callers destination
	   39
 00000104  C3							RET

 00000105  62 03 85 40/ 03	@@3:			VALIGNQ			ZMM31, ZMM31, ZMM28, 5
	   FC 05
 0000010C  62 61 FD 48/ 7F					VMOVDQA64		ZM_PTR [ RCX ], ZMM31			; store result at callers destination
	   39
 00000112  C3							RET

 00000113  62 03 85 40/ 03	@@4:			VALIGNQ			ZMM31, ZMM31, ZMM28, 4
	   FC 04
 0000011A  62 61 FD 48/ 7F					VMOVDQA64		ZM_PTR [ RCX ], ZMM31			; store result at callers destination
	   39
 00000120  C3							RET

 00000121  62 03 85 40/ 03	@@5:			VALIGNQ			ZMM31, ZMM31, ZMM28, 3
	   FC 03
 00000128  62 61 FD 48/ 7F					VMOVDQA64		ZM_PTR [ RCX ], ZMM31			; store result at callers destination
	   39
 0000012E  C3							RET

 0000012F  62 03 85 40/ 03	@@6:			VALIGNQ			ZMM31, ZMM31, ZMM28, 2
	   FC 02
 00000136  62 61 FD 48/ 7F					VMOVDQA64		ZM_PTR [ RCX ], ZMM31			; store result at callers destination
	   39
 0000013C  C3							RET

 0000013D  62 03 85 40/ 03	@@7:			VALIGNQ			ZMM31, ZMM31, ZMM28, 1
	   FC 01
 00000144  62 61 FD 48/ 7F					VMOVDQA64		ZM_PTR [ RCX ], ZMM31			; store result at callers destination
	   39
 0000014A  C3							RET	

					ELSE
					ENDIF	
								Leaf_End		shr_u, ui512
 0000014B		     1	shr_u			ENDP
 0000014B		     1	ui512			ENDS


				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;			shl_u		-	shift supplied source 512bit (8 QWORDS) left, put in destination
				;			Prototype:		void shl_u( u64* destination, u64* source, u16 bits_to_shift);
				;			destination	-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RCX)
				;			source		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RDX)
				;			bits		-	Number of bits to shift. Will fill with zeros, truncate those shifted out (in R8W)
				;			returns		-	nothing (0)

								Leaf_Entry		shl_u, ui512
 0000014B		     1	ui512			SEGMENT			PARA 'CODE'
 0000014B  00000006 [	     1					DB				6 DUP (0cch)
	    CC
	   ]
 00000160		     1	shl_u			PROC			FRAME
								CheckAlign		RCX
								CheckAlign		RDX

 00000160  66| 41/ 81 F8					CMP				R8W, 512					; handle edge case, shift 512 or more bits
	   0200
 00000166  7C 0D						JL				@F
								Zero512			RCX							; zero destination
 00000168  62 01 85 40/ EF   1					VPXORQ			ZMM31, ZMM31, ZMM31
	   FF
 0000016E  62 61 FD 48/ 7F   1					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
 00000174  C3							RET
 00000175			@@:
 00000175  49/ 81 E0						AND				R8, 511						; mask out hghbits above shift count, test for 0
	   000001FF
 0000017C  75 12						JNE				@F							; handle edge case, shift zero bits
 0000017E  48/ 3B CA						CMP				RCX, RDX
 00000181  74 0C						JE				@@r
								Copy512			RCX, RDX					; no shift, just copy (destination, source already in regs)
 00000183  62 61 FD 48/ 6F   1					VMOVDQA64		ZMM31, ZM_PTR [ RDX ]
	   3A
 00000189  62 61 FD 48/ 7F   1					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
 0000018F			@@r:
 0000018F  C3							RET
 00000190			@@:

					IF __UseZ	
 00000190  62 61 FD 48/ 6F					VMOVDQA64		ZMM31, ZM_PTR [ RDX ]		; load the 8 qwords into zmm reg (note: word order)
	   3A
 00000196  49/ 0F B7 C0						MOVZX			RAX, R8W
 0000019A  66| 83 E0 3F						AND				AX, 03fh
 0000019E  74 19						JZ				@F							; must be multiple of 64 bits to shift, no bits, just words to shift
				;			Do the shift of bits within the 64 bit words
 000001A0  62 62 FD 48/ 7C					VPBROADCASTQ	ZMM29, RAX					; Nr bits to shift left
	   E8
 000001A6  62 01 9D 40/ EF					VPXORQ			ZMM28, ZMM28, ZMM28			; 
	   E4
 000001AC  62 03 9D 40/ 03					VALIGNQ			ZMM30, ZMM28, ZMM31, 1		; shift copy of words right one word (to get low order bits aligned for shift)
	   F7 01
 000001B3  62 02 8D 40/ 71					VPSHLDVQ		ZMM31, ZMM30, ZMM29			; shift, concatentating low bits of next word with each word to shift in
	   FD
 000001B9			@@:
				; with the bits shifted within the words, if the desired shift is more than 64 bits, word shifts are required
				; verify Nr of word shift is zero to seven, use it as index into jump table; jump to appropriate shift
 000001B9  66| 41/ C1 E8					SHR				R8W, 6						; divide Nr bits to shift by 8, giving index to jump table
	   06
 000001BE  48/ 8D 05						LEA				RAX, @jt					; address of jump table
	   000001C9 R
 000001C5  42/ FF 24 C0						JMP				Q_PTR [ RAX ] [ R8 * 8 ]	; jump to routine that shifts the appropriate Nr words
 000001C9			@jt:
 000001C9  0000000000000210 R					QWORD			@@E, @@1, @@2, @@3, @@4, @@5, @@6, @@7
	   0000000000000209 R
	   0000000000000217 R
	   0000000000000225 R
	   0000000000000233 R
	   0000000000000241 R
	   000000000000024F R
	   000000000000025D R
				;			Do the shifts of multiples of 64 bits (words)
 00000209  62 03 9D 40/ 03	@@1:			VALIGNQ			ZMM31, ZMM28, ZMM31, 1
	   FF 01
 00000210  62 61 FD 48/ 7F	@@E:			VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
 00000216  C3							RET

 00000217  62 03 9D 40/ 03	@@2:			VALIGNQ			ZMM31, ZMM28, ZMM31, 2
	   FF 02
 0000021E  62 61 FD 48/ 7F					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
 00000224  C3							RET

 00000225  62 03 9D 40/ 03	@@3:			VALIGNQ			ZMM31, ZMM28, ZMM31, 3
	   FF 03
 0000022C  62 61 FD 48/ 7F					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
 00000232  C3							RET

 00000233  62 03 9D 40/ 03	@@4:			VALIGNQ			ZMM31, ZMM28, ZMM31, 4
	   FF 04
 0000023A  62 61 FD 48/ 7F					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
 00000240  C3							RET

 00000241  62 03 9D 40/ 03	@@5:			VALIGNQ			ZMM31, ZMM28, ZMM31, 5
	   FF 05
 00000248  62 61 FD 48/ 7F					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
 0000024E  C3							RET

 0000024F  62 03 9D 40/ 03	@@6:			VALIGNQ			ZMM31, ZMM28, ZMM31, 6
	   FF 06
 00000256  62 61 FD 48/ 7F					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
 0000025C  C3							RET

 0000025D  62 03 9D 40/ 03	@@7:			VALIGNQ			ZMM31, ZMM28, ZMM31, 7
	   FF 07
 00000264  62 61 FD 48/ 7F					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
 0000026A  C3							RET
								
					ELSE
					ENDIF
								Leaf_End		shl_u, ui512
 0000026B		     1	shl_u			ENDP
 0000026B		     1	ui512			ENDS


				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;			and_u		-	logical 'AND' bits in lh_op, rh_op, put result in destination
				;			Prototype:		void and_u( u64* destination, u64* lh_op, u64* rh_op);
				;			destination	-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RCX)
				;			lh_op		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RDX)
				;			rh_op		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in R8)
				;			returns		-	nothing (0)
								Leaf_Entry		and_u, ui512
 0000026B		     1	ui512			SEGMENT			PARA 'CODE'
 0000026B  00000006 [	     1					DB				6 DUP (0cch)
	    CC
	   ]
 00000280		     1	and_u			PROC			FRAME
								CheckAlign		RCX
								CheckAlign		RDX
								CheckAlign		R8

					IF __UseZ	
 00000280  62 61 FD 48/ 6F					VMOVDQA64		ZMM31, ZM_PTR [ RDX ]		; load lh_op	
	   3A
 00000286  62 41 85 40/ DB					VPANDQ			ZMM31, ZMM31, ZM_PTR [ R8 ]	; 'AND' with rh_op
	   38
 0000028C  62 61 FD 48/ 7F					VMOVDQA64		ZM_PTR [ RCX ], ZMM31		; store at destination address
	   39

					ELSEIF __UseY
					ENDIF
 00000292  C3							RET		
								Leaf_End		and_u, ui512
 00000293		     1	and_u			ENDP
 00000293		     1	ui512			ENDS

				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;			or_u		-	logical 'OR' bits in lh_op, rh_op, put result in destination
				;			Prototype:		void or_u( u64* destination, u64* lh_op, u64* rh_op);
				;			destination	-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RCX)
				;			lh_op		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RDX)
				;			rh_op		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in R8)
				;			returns		-	nothing (0)

								Leaf_Entry		or_u, ui512
 00000293		     1	ui512			SEGMENT			PARA 'CODE'
 00000293  00000006 [	     1					DB				6 DUP (0cch)
	    CC
	   ]
 000002A0		     1	or_u			PROC			FRAME
								CheckAlign		RCX
								CheckAlign		RDX
								CheckAlign		R8

					IF __UseZ	
 000002A0  62 61 FD 48/ 6F					VMOVDQA64		ZMM31, ZM_PTR [ RDX ]			
	   3A
 000002A6  62 41 85 40/ EB					VPORQ			ZMM31, ZMM31, ZM_PTR [ R8 ]
	   38
 000002AC  62 61 FD 48/ 7F					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39

					ELSEIF __UseY
					ENDIF
 000002B2  C3							RET 
								Leaf_End		or_u, ui512
 000002B3		     1	or_u			ENDP
 000002B3		     1	ui512			ENDS


				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;			not_u		-	logical 'NOT' bits in source, put result in destination
				;			Prototype:		void not_u( u64* destination, u64* source);
				;			destination	-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RCX)
				;			source		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RDX)
				;			returns		-	nothing (0)

								Leaf_Entry		not_u, ui512
 000002B3		     1	ui512			SEGMENT			PARA 'CODE'
 000002B3  00000006 [	     1					DB				6 DUP (0cch)
	    CC
	   ]
 000002C0		     1	not_u			PROC			FRAME
								CheckAlign		RCX
								CheckAlign		RDX

					IF __UseZ	
 000002C0  62 61 FD 48/ 6F					VMOVDQA64		ZMM31, ZM_PTR [RDX]			
	   3A
 000002C6  62 61 85 40/ DF					VPANDNQ			ZMM31, ZMM31, qOnes			; qOnes (declared in the data section of this module) is 8 QWORDS, binary all ones
	   3D 00000000 R
 000002D0  62 61 FD 48/ 7F					VMOVDQA64		ZM_PTR [RCX], ZMM31
	   39

					ELSEIF __UseY
					ENDIF
 000002D6  C3							RET	
								Leaf_End		not_u, ui512
 000002D7		     1	not_u			ENDP
 000002D7		     1	ui512			ENDS

				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;			msb_u		-	find most significant bit in supplied source 512bit (8 QWORDS)
				;			Prototype:		s16 msb_u( u64* source );
				;			source		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RCX)
				;			returns		-	-1 if no most significant bit, bit number otherwise, bits numbered 0 to 511 inclusive
				;			Note:	a returned zero means the significant bit is bit0 of the eighth word of the 512bit source parameter; (the right most bit)
				;					a returned 511 means bit63 of the first word (the left most bit)
								Leaf_Entry		msb_u, ui512
 000002D7		     1	ui512			SEGMENT			PARA 'CODE'
 000002D7  00000006 [	     1					DB				6 DUP (0cch)
	    CC
	   ]
 000002E0		     1	msb_u			PROC			FRAME
								CheckAlign		RCX

					IF __UseZ
 000002E0  62 61 FD 48/ 6F					VMOVDQA64		ZMM31, ZM_PTR [RCX]			; Load source 
	   39
 000002E6  62 92 85 40/ 27					VPTESTMQ		K1, ZMM31, ZMM31			; find non-zero words (if any)
	   CF
 000002EC  C5 F9/ 93 C1						KMOVB			EAX, K1
 000002F0  83 F8 00						CMP				EAX, 0						; exit with -1 if all eight qwords are zero (no significant bit)
 000002F3  75 07						JNE				@F
 000002F5  8B 05 00000054 R					MOV				EAX, ret_1
 000002FB  C3							RET
 000002FC			@@:
 000002FC  0F BC C8						BSF				ECX, EAX					; determine index of word from first non-zero bit in mask
 000002FF  48/ C7 C0						MOV				RAX, 7
	   00000007
 00000306  48/ 2B C1						SUB				RAX, RCX					; convert index to offset
 00000309  48/ C1 E0 06						SHL				RAX, 6
 0000030D  62 62 FD C9/ 8B					VPCOMPRESSQ		ZMM0 {k1}{z}, ZMM31
	   F8
 00000313  C4 E1 F9/ 7E C1					VMOVQ			RCX, XMM0					; extract the non-zero word
 00000318  48/ 0F BD C9						BSR				RCX, RCX					; get the index of the non-zero bit within the word
 0000031C  48/ 03 C1						ADD				RAX, RCX					; Word index * 64 + bit index becomes bit index to first non-zero bit (0 to 511, where )
 0000031F  C3							RET

					ELSE
					ENDIF

								Leaf_End		msb_u, ui512
 00000320		     1	msb_u			ENDP
 00000320		     1	ui512			ENDS

				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;			lsb_u		-	find least significant bit in supplied source 512bit (8 QWORDS)
				;			Prototype:		s16 lsb_u( u64* source );
				;			source		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RCX)
				;			returns		-	-1 if no least significant bit, bit number otherwise, bits numbered 0 to 511 inclusive
				;			Note:	a returned zero means the significant bit is bit0 of the eighth word of the 512bit source parameter; (the right most bit)
				;					a returned 511 means bit63 of the first word (the left most bit)

								Leaf_Entry		lsb_u, ui512				
 00000320		     1	ui512			SEGMENT			PARA 'CODE'
 00000320  00000006 [	     1					DB				6 DUP (0cch)
	    CC
	   ]
 00000330		     1	lsb_u			PROC			FRAME
								CheckAlign		RCX

					IF __UseZ
 00000330  62 61 FD 48/ 6F					VMOVDQA64		ZMM31, ZM_PTR [ RCX ]		; Load source 
	   39
 00000336  62 92 85 40/ 27					VPTESTMQ		K1, ZMM31, ZMM31			; find non-zero words (if any)
	   CF
 0000033C  C5 F9/ 93 C1						KMOVB			EAX, K1
 00000340  83 F8 00						CMP				EAX, 0						; exit with -1 if all eight qwords are zero (no significant bit)
 00000343  75 07						JNE				@F
 00000345  8B 05 00000054 R					MOV				EAX, ret_1
 0000034B  C3							RET
 0000034C			@@:
 0000034C  0F BD C8						BSR				ECX, EAX					; determine index of word from last non-zero bit in mask
 0000034F  48/ C7 C0						MOV				RAX, 7
	   00000007
 00000356  48/ 2B C1						SUB				RAX, RCX					; convert index to offset
 00000359  48/ C1 E0 06						SHL				RAX, 6
 0000035D  4D/ 33 C9						XOR				R9, R9
 00000360  49/ FF C1						INC				R9
 00000363  49/ D3 E1						SHL				R9, CL
 00000366  C4 C1 79/ 92 D1					KMOVB			K2, R9
 0000036B  62 62 FD CA/ 8B					VPCOMPRESSQ		ZMM0 {k2}{z}, ZMM31
	   F8
 00000371  C4 E1 F9/ 7E C1					VMOVQ			RCX, XMM0					; extract the non-zero word
 00000376  48/ 0F BD C9						BSR				RCX, RCX					; get the index of the non-zero bit within the word
 0000037A  48/ 03 C1						ADD				RAX, RCX					; Word index * 64 + bit index becomes bit index to first non-zero bit (0 to 511, where )
 0000037D  C3							RET

					ELSE
					ENDIF
								Leaf_End		lsb_u, ui512
 0000037E		     1	lsb_u			ENDP
 0000037E		     1	ui512			ENDS



				END
Microsoft (R) Macro Assembler (x64) Version 14.44.35213.0   08/02/25 22:18:07
ui512b.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

CheckAlign . . . . . . . . . . .	Proc
Copy512Q . . . . . . . . . . . .	Proc
Copy512  . . . . . . . . . . . .	Proc
End_Prolog . . . . . . . . . . .	Proc
GetZatMask . . . . . . . . . . .	Proc
Leaf_End . . . . . . . . . . . .	Proc
Leaf_Entry . . . . . . . . . . .	Proc
MemConstants . . . . . . . . . .	Proc
SetZatMask . . . . . . . . . . .	Proc
VerifyRegs . . . . . . . . . . .	Proc
Zero512Q . . . . . . . . . . . .	Proc
Zero512  . . . . . . . . . . . .	Proc


Records:

                N a m e                  Width     # fields
                                         Shift     Width     Mask      Initial

kMask  . . . . . . . . . . . . .	 00000009      00000009
  b8 . . . . . . . . . . . . . .	 00000008      00000001	     0100     ?
  b7 . . . . . . . . . . . . . .	 00000007      00000001	     0080     ?
  b6 . . . . . . . . . . . . . .	 00000006      00000001	     0040     ?
  b5 . . . . . . . . . . . . . .	 00000005      00000001	     0020     ?
  b4 . . . . . . . . . . . . . .	 00000004      00000001	     0010     ?
  b3 . . . . . . . . . . . . . .	 00000003      00000001	     0008     ?
  b2 . . . . . . . . . . . . . .	 00000002      00000001	     0004     ?
  b1 . . . . . . . . . . . . . .	 00000001      00000001	     0002     ?
  b0 . . . . . . . . . . . . . .	 00000000      00000001	     0001     ?


Segments:

                N a m e                  Length   Align   Class

ui512D . . . . . . . . . . . . .	 00000061 64	  'DATA'	
ui512  . . . . . . . . . . . . .	 0000037E 16	  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

and_u  . . . . . . . . . . . . .	P 	 00000280 ui512	Length= 00000013 Public
lsb_u  . . . . . . . . . . . . .	P 	 00000330 ui512	Length= 0000004E Public
msb_u  . . . . . . . . . . . . .	P 	 000002E0 ui512	Length= 00000040 Public
not_u  . . . . . . . . . . . . .	P 	 000002C0 ui512	Length= 00000017 Public
or_u . . . . . . . . . . . . . .	P 	 000002A0 ui512	Length= 00000013 Public
reg_verify . . . . . . . . . . .	P 	 00000010 ui512	Length= 00000024 Public
shl_u  . . . . . . . . . . . . .	P 	 00000160 ui512	Length= 0000010B Public
  @@r  . . . . . . . . . . . . .	L 	 0000018F ui512	
  @jt  . . . . . . . . . . . . .	L 	 000001C9 ui512	
  @@1  . . . . . . . . . . . . .	L 	 00000209 ui512	
  @@E  . . . . . . . . . . . . .	L 	 00000210 ui512	
  @@2  . . . . . . . . . . . . .	L 	 00000217 ui512	
  @@3  . . . . . . . . . . . . .	L 	 00000225 ui512	
  @@4  . . . . . . . . . . . . .	L 	 00000233 ui512	
  @@5  . . . . . . . . . . . . .	L 	 00000241 ui512	
  @@6  . . . . . . . . . . . . .	L 	 0000024F ui512	
  @@7  . . . . . . . . . . . . .	L 	 0000025D ui512	
shr_u  . . . . . . . . . . . . .	P 	 00000040 ui512	Length= 0000010B Public
  @@ret  . . . . . . . . . . . .	L 	 0000006F ui512	
  @jt  . . . . . . . . . . . . .	L 	 000000A9 ui512	
  @@1  . . . . . . . . . . . . .	L 	 000000E9 ui512	
  @@E  . . . . . . . . . . . . .	L 	 000000F0 ui512	
  @@2  . . . . . . . . . . . . .	L 	 000000F7 ui512	
  @@3  . . . . . . . . . . . . .	L 	 00000105 ui512	
  @@4  . . . . . . . . . . . . .	L 	 00000113 ui512	
  @@5  . . . . . . . . . . . . .	L 	 00000121 ui512	
  @@6  . . . . . . . . . . . . .	L 	 0000012F ui512	
  @@7  . . . . . . . . . . . . .	L 	 0000013D ui512	


Symbols:

                N a m e                 Type     Value    Attr

$xdatasym  . . . . . . . . . . .	Byte	 00000000 _XDATA	
B_PTR  . . . . . . . . . . . . .	Text   	 BYTE PTR
CPEQ . . . . . . . . . . . . . .	Number	 00000000h   
CPFALSE  . . . . . . . . . . . .	Number	 00000003h   
CPGE . . . . . . . . . . . . . .	Number	 00000005h   
CPGT . . . . . . . . . . . . . .	Number	 00000006h   
CPLE . . . . . . . . . . . . . .	Number	 00000002h   
CPLT . . . . . . . . . . . . . .	Number	 00000001h   
CPNE . . . . . . . . . . . . . .	Number	 00000004h   
CPTRUE . . . . . . . . . . . . .	Number	 00000007h   
D_PTR  . . . . . . . . . . . . .	Text   	 DWORD PTR
MaskBit0 . . . . . . . . . . . .	Number	 00000001h   
MaskBit1 . . . . . . . . . . . .	Number	 00000002h   
MaskBit2 . . . . . . . . . . . .	Number	 00000004h   
MaskBit3 . . . . . . . . . . . .	Number	 00000008h   
MaskBit4 . . . . . . . . . . . .	Number	 00000010h   
MaskBit5 . . . . . . . . . . . .	Number	 00000020h   
MaskBit6 . . . . . . . . . . . .	Number	 00000040h   
MaskBit7 . . . . . . . . . . . .	Number	 00000080h   
Q_PTR  . . . . . . . . . . . . .	Text   	 QWORD PTR
W_PTR  . . . . . . . . . . . . .	Text   	 WORD PTR
XM_PTR . . . . . . . . . . . . .	Text   	 XMMWORD PTR
YM_PTR . . . . . . . . . . . . .	Text   	 YMMWORD PTR
ZM_PTR . . . . . . . . . . . . .	Text   	 ZMMWORD PTR
__CheckAlign . . . . . . . . . .	Number	 00000000h   
__UseQ . . . . . . . . . . . . .	Number	 00000000h   
__UseX . . . . . . . . . . . . .	Number	 00000000h   
__UseY . . . . . . . . . . . . .	Number	 00000000h   
__UseZ . . . . . . . . . . . . .	Number	 00000001h   
__VerifyRegs . . . . . . . . . .	Number	 00000001h   
add_uT64 . . . . . . . . . . . .	L 	 00000000 External
add_u  . . . . . . . . . . . . .	L 	 00000000 External
compare_uT64 . . . . . . . . . .	L 	 00000000 External
compare_u  . . . . . . . . . . .	L 	 00000000 External
copy_u . . . . . . . . . . . . .	L 	 00000000 External
m32BCST  . . . . . . . . . . . .	Text   	 DWORD BCST
m64BCST  . . . . . . . . . . . .	Text   	 QWORD BCST
mskAll8  . . . . . . . . . . . .	Byte	 00000058 ui512D	
mskB0  . . . . . . . . . . . . .	Byte	 00000059 ui512D	
mskB1  . . . . . . . . . . . . .	Byte	 0000005A ui512D	
mskB2  . . . . . . . . . . . . .	Byte	 0000005B ui512D	
mskB3  . . . . . . . . . . . . .	Byte	 0000005C ui512D	
mskB4  . . . . . . . . . . . . .	Byte	 0000005D ui512D	
mskB5  . . . . . . . . . . . . .	Byte	 0000005E ui512D	
mskB6  . . . . . . . . . . . . .	Byte	 0000005F ui512D	
mskB7  . . . . . . . . . . . . .	Byte	 00000060 ui512D	
mskHex100  . . . . . . . . . . .	DWord	 00000048 ui512D	
qOnes  . . . . . . . . . . . . .	QWord	 00000000 ui512D	
ret0 . . . . . . . . . . . . . .	DWord	 0000004C ui512D	
ret1 . . . . . . . . . . . . . .	DWord	 00000050 ui512D	
ret_1  . . . . . . . . . . . . .	DWord	 00000054 ui512D	
set_uT64 . . . . . . . . . . . .	L 	 00000000 External
sub_uT64 . . . . . . . . . . . .	L 	 00000000 External
sub_u  . . . . . . . . . . . . .	L 	 00000000 External
ui512aMacros_INC . . . . . . . .	Text   	 1
ui512bMacros_INC . . . . . . . .	Text   	 1
zeroQ  . . . . . . . . . . . . .	QWord	 00000040 ui512D	
zero_u . . . . . . . . . . . . .	L 	 00000000 External

	   0 Warnings
	   0 Errors
