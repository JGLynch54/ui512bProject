Microsoft (R) Macro Assembler (x64) Version 14.40.33811.0   06/12/24 11:42:07
ui512b.asm						     Page 1 - 1


				;
				;			ui512b
				;
				;			File:			ui512b.asm
				;			Author:			John G. Lynch
				;			Legal:			Copyright @2024, per MIT License below
				;			Date:			June 11, 2024
				;
				;			Notes:
				;				ui512 is a small project to provide basic operations for a variable type of unsigned 512 bit integer.
				;				The basic operations in the module ui512a are: zero, copy, compare, add, subtract.
				;               Other optional modules provide bit ops and multiply / divide.
				;				It is written in assembly language, using the MASM (ml64) assembler provided as an option within 
				;               Visual Studio (currently using VS Community 2022 17.9.6).
				;				It provides external signatures that allow linkage to C and C++ programs, where a shell/wrapper
				;               could encapsulate the methods as part of an object.
				;				It has assembly time options directing the use of Intel processor extensions:
				;               AVX4, AVX2, SIMD, or none: (Z (512), Y (256), or X (128) registers, or regular Q (64bit))
				;				If processor extensions are used, the caller must align the variables declared and passed on the 
				;               appropriate byte boundary (e.g. alignas 64 for 512)
				;				This module is very light-weight (less than 1K bytes) and relatively fast, but is not intended
				;               for all processor types or all environments. 
				;				Use for private (hobbyist), or instructional, or as an example for more ambitious projects is
				;               all it is meant to be.
				;
				;				ui512b provides basic bit-oriented operations: shift left, shift right, and, or, not,
				;               least significant bit and most significant bit.
				;
				;
				;			MIT License
				;
				;			Copyright (c) 2024 John G. Lynch
				;
				;				Permission is hereby granted, free of charge, to any person obtaining a copy
				;				of this software and associated documentation files (the "Software"), to deal
				;				in the Software without restriction, including without limitation the rights
				;				to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
				;				copies of the Software, and to permit persons to whom the Software is
				;				furnished to do so, subject to the following conditions:
				;
				;				The above copyright notice and this permission notice shall be included in all
				;				copies or substantial portions of the Software.
				;
				;				THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
				;				IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
				;				FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
				;				AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
				;				LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
				;				OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
				;				SOFTWARE.
				;
							INCLUDE			ui512aMacros.inc
			      C .nolist
			      C .list
			      C IFNDEF						ui512aMacros_INC
 = 1			      C ui512aMacros_INC EQU		<1>
			      C ;           header file equivalent extern declarations
			      C ;			EXTERN "C" signatures (from ui512a.asm)
			      C 
			      C ;	// void zero_u ( u64* destarr ); 
			      C ;	// fill supplied 512bit (8 QWORDS) with zero
			      C EXTERNDEF	zero_u:PROC
			      C 
			      C ;	// void copy_u ( u64* destarr, u64* srcarr );
			      C ;	// copy supplied 512bit (8 QWORDS) source to supplied destination
			      C EXTERNDEF	copy_u:PROC
			      C 
			      C ;	// void set_uT64 ( u64* destarr, u64 value );
			      C ;	// set supplied destination 512 bit to supplied u64 value
			      C EXTERNDEF	set_uT64:PROC
			      C 
			      C ;	// int compare_u ( u64* lh_op, u64* rh_op );
			      C ;	// compare supplied 512bit (8 QWORDS) LH operand to supplied RH operand
			      C ;	// returns: (0) for equal, -1 for less than, 1 for greater than (logical, unsigned compare)
			      C EXTERNDEF	compare_u:PROC
			      C 
			      C ;	// int compare_uT64 ( u64* lh_op, u64 rh_op );
			      C ;	// compare supplied 512bit (8 QWORDS) LH operand to supplied 64bit RH operand (value)
			      C ;	// returns: (0) for equal, -1 for less than, 1 for greater than (logical, unsigned compare)
			      C EXTERNDEF	compare_uT64:PROC
			      C 
			      C ;	// void add_u ( u64* sum, u64* addend1, u64* addend2 );
			      C ;	// add supplied 512bit (8 QWORDS) sources to supplied destination
			      C ;	// returns: zero for no carry, 1 for carry (overflow)
			      C EXTERNDEF	add_u:PROC
			      C 
			      C ;	// s32 add_uT64 ( u64* sum, u64* addend1, u64 addend2 );
			      C ;	// add 64bit QWORD (value) to supplied 512bit (8 QWORDS), place in supplied destination
			      C ;	// returns: zero for no carry, 1 for carry (overflow)
			      C EXTERNDEF	add_uT64:PROC
			      C 
			      C ;	// s32 sub_u ( u64* difference, u64* left operand, u64* right operand );
			      C ;	// subtract supplied 512bit (8 QWORDS) RH OP from LH OP giving difference in destination
			      C ;	// returns: zero for no borrow, 1 for borrow (underflow)
			      C EXTERNDEF	sub_u:PROC
			      C 
			      C ;	// s32 sub_uT64( u64* difference, u64* left operand, u64 right operand );
			      C ;	// subtract supplied 64 bit right hand (64 bit value) op from left hand (512 bit) giving difference
			      C ;	// returns: zero for no borrow, 1 for borrow (underflow)
			      C EXTERNDEF	sub_uT64:PROC
			      C 
			      C ;			Configuration choices
 = 00000001		      C __UseZ		EQU				1							; Use AVX4 processor features (512 bit registers and instructions)
 = 00000000		      C __UseY		EQU				0							; Use AVX2 processor features (256 bit registers and instructions)
 = 00000000		      C __UseX		EQU				0							; Use SIMD/SSE processor features (128 bit registers and instructions)
 = 00000000		      C __UseQ		EQU				0							; Do not use extensions, use standard x64 bit registers and instructions
			      C 
			      C ;           Some coding shortcuts
 = ZMMWORD PTR		      C ZM_PTR      EQU             ZMMWORD PTR
 = YMMWORD PTR		      C YM_PTR      EQU             YMMWORD PTR
 = XMMWORD PTR		      C XM_PTR      EQU             XMMWORD PTR
 = QWORD PTR		      C Q_PTR       EQU             QWORD PTR
 = DWORD PTR		      C D_PTR       EQU             DWORD PTR
 = WORD PTR		      C W_PTR       EQU             WORD PTR
 = BYTE PTR		      C B_PTR       EQU             BYTE PTR
 = DWORD BCST		      C m32BCST		EQU				DWORD BCST
 = QWORD BCST		      C m64BCST		EQU				QWORD BCST
			      C 
			      C ;			mask codes (for compares)
 = 00000000		      C CPEQ		EQU				0
 = 00000001		      C CPLT		EQU				1
 = 00000002		      C CPLE		EQU				2
 = 00000004		      C CPNE		EQU				4
 = 00000005		      C CPGE		EQU				5
 = 00000006		      C CPGT		EQU				6
			      C ;===============================================
			      C ;          Local macros
			      C ;===============================================
			      C 
			      C ;==========================================================================================
			      C ;           Notes on x64 calling conventions        aka "fast call"
			      C ; ref: https://learn.microsoft.com/en-us/cpp/build/x64-calling-convention?view=msvc-170
			      C ; The first four parameters are passed in registers: RCX, RDX, R8, R9 if integer or address
			      C ; if floating point XMM0L, XMM1L, XMM2L, XMM3L
			      C ; return (if any) is in EAX
			      C ;===========================================================================================
			      C ;
			      C ;===========================================================================================
			      C ; RAX, RCX, RDX, R8, R9, R10, R11 are considered volatile, and do not need to be saved
			      C ; XMM0, YMM0, ZMM0 and  ..1, ..2, ..3, ..4, and ..5 are considered volatile,
			      C ;	and do not need to be saved
			      C ;  ZMM16 to ZMM31: volatile, also do not need to be zeroed to resume full clock speeds
			      C ;
			      C ; R12, R13, R14, R15, RDI, RSI, RBX, RBP, RSP are non-volatile and if used, must be restored
			      C ; XMM, YMM, and ZMM ..6 thru 15 are non-volatile and if used, must be restored
			      C ;
			      C ; A "leaf" function is one that does not call and does not change non volatile registers
			      C ; leaf functionss therefore do not need frame, prolog or epilog
			      C ;
			      C ;===========================================================================================
			      C 
			      C Zero512		MACRO			dest
			      C ;
			      C ;			Zero a 512 bit destination, conditional assembly based on configuration parameters
			      C ;
			      C 	IF		__UseZ
			      C 			VPXORQ			ZMM31, ZMM31, ZMM31
			      C 			VMOVDQA64		ZM_PTR [ dest ], ZMM31
			      C 	ELSEIF	__UseY
			      C 			VPXORQ			YMM4, YMM4, YMM4
			      C 			VMOVDQA64		YM_PTR [ dest ] + [ 0 * 8 ], YMM4
			      C 			VMOVDQA64		YM_PTR [ dest ] + [ 4 * 8 ], YMM4
			      C 	ELSEIF	__UseX
			      C 			PXOR			XMM4, XMM4
			      C 			MOVDQA			XM_PTR [ dest ] + [ 0 * 8 ], XMM4
			      C 			MOVDQA			XM_PTR [ dest ] + [ 2 * 8 ], XMM4
			      C 			MOVDQA			XM_PTR [ dest ] + [ 4 * 8 ], XMM4
			      C 			MOVDQA			XM_PTR [ dest ] + [ 6 * 8 ], XMM4			
			      C 	ELSE
			      C 			XOR				RAX, RAX
			      C 			MOV				[ dest ] + [ 0 * 8 ], RAX
			      C 			MOV				[ dest ] + [ 1 * 8 ], RAX
			      C 			MOV				[ dest ] + [ 2 * 8 ], RAX
			      C 			MOV				[ dest ] + [ 3 * 8 ], RAX
			      C 			MOV				[ dest ] + [ 4 * 8 ], RAX
			      C 			MOV				[ dest ] + [ 5 * 8 ], RAX
			      C 			MOV				[ dest ] + [ 6 * 8 ], RAX
			      C 			MOV				[ dest ] + [ 7 * 8 ], RAX
			      C 	ENDIF
			      C 			ENDM
			      C 
			      C Copy512		MACRO			dest, src
			      C ;
			      C ;			Copy a 512 bit source to destination, conditional assembly based on configuration parameters
			      C ;
			      C 	IF		__UseZ
			      C 			VMOVDQA64		ZMM31, ZM_PTR [ src ]
			      C 			VMOVDQA64		ZM_PTR [ dest ], ZMM31
			      C 	ELSEIF	__UseY
			      C 			VMOVDQA64		YMM4, YM_PTR [ src ] + [ 0 * 8 ]
			      C 			VMOVDQA64		YM_PTR [ dest ] + [ 0 * 8 ], YMM4
			      C 			VMOVDQA64		YMM5, YM_PTR [ src ] + [ 4 * 8 ]
			      C 			VMOVDQA64		YM_PTR [ dest ] + [ 4 * 8 ], YMM5
			      C 	ELSEIF	__UseX
			      C 			MOVDQA			XMM4, XM_PTR [ src ] + [ 0 * 8 ]
			      C 			MOVDQA			XM_PTR [ dest ] + [ 0 * 8 ], XMM4
			      C 			MOVDQA			XMM3, XM_PTR [ src ] + [ 2 * 8 ]
			      C 			MOVDQA			XM_PTR [ dest ] + [ 2 * 8 ], XMM3
			      C 			MOVDQA			XMM4, XM_PTR [ src ] + [ 4 * 8 ]
			      C 			MOVDQA			XM_PTR [ dest ] + [ 4 * 8 ], XMM4
			      C 			MOVDQA			XMM3, XM_PTR [ src ] + [ 6 * 8 ]
			      C 			MOVDQA			XM_PTR [ dest ] + [ 6 * 8 ], XMM3
			      C 	ELSE
			      C 			MOV				RAX, [ src ] + [ 0 * 8 ]
			      C 			MOV				[ dest ] + [ 0 * 8 ], RAX
			      C 			MOV				RAX, [ src ] + [ 1 * 8 ]
			      C 			MOV				[ dest ] + [ 1 * 8 ], RAX
			      C 			MOV				RAX, [ src ] + [ 2 * 8 ]
			      C 			MOV				[ dest ] + [ 2 * 8 ], RAX
			      C 			MOV				RAX, [ src ] + [ 3 * 8 ]
			      C 			MOV				[ dest ] + [ 3 * 8 ], RAX
			      C 			MOV				RAX, [ src ] + [ 4 * 8 ]
			      C 			MOV				[ dest ] + [ 4 * 8 ], RAX
			      C 			MOV				RAX, [ src ] + [ 5 * 8 ]
			      C 			MOV				[ dest ] + [ 5 * 8 ], RAX
			      C 			MOV				RAX, [ src ] + [ 6 * 8 ]
			      C 			MOV				[ dest ] + [ 6 * 8 ], RAX
			      C 			MOV				RAX, [ src ] + [ 7 * 8 ]
			      C 			MOV				[ dest ] + [ 7 * 8 ], RAX
			      C 	ENDIF
			      C 			ENDM
			      C 
			      C ENDIF
			      C 
							INCLUDE			ui512bMacros.inc
			      C .nolist
			      C .list
			      C IFNDEF						ui512bMacros_INC
 = 1			      C ui512bMacros_INC EQU		<1>
			      C ;           header file equivalent extern declarations
			      C ;			EXTERN "C" signatures (from ui512b.asm)
			      C 
			      C ;   // void shr_u ( u64* destination, u64* source, u32 bits_to_shift )
			      C ;   // shift supplied source 512bit (8 QWORDS) right, put in destination
			      C EXTERNDEF	shr_u:PROC
			      C 
			      C ;   // void shl_u ( u64* destination, u64* source, u16 bits_to_shift );
			      C ;   // shift supplied source 512bit (8 QWORDS) left, put in destination
			      C EXTERNDEF	shl_u:PROC
			      C 
			      C ;   // void and_u ( u64* destination, u64* lh_op, u64* rh_op );
			      C ;   // logical 'AND' bits in lh_op, rh_op, put result in destination
			      C EXTERNDEF	and_u:PROC
			      C 
			      C ;   // logical 'OR' bits in lh_op, rh_op, put result in destination
			      C ;   // void or_u( u64* destination, u64* lh_op, u64* rh_op);
			      C EXTERNDEF	or_u:PROC
			      C 
			      C ;   // logical 'NOT' bits in source, put result in destination
			      C ;	// void not_u( u64* destination, u64* source);
			      C EXTERNDEF	not_u:PROC
			      C 
			      C ;   // find most significant bit in supplied source 512bit (8 QWORDS)
			      C ;	// s16 msb_u( u64* );
			      C ;   // returns: -1 if no most significant bit, bit number otherwise, bits numbered 0 to 511 inclusive
			      C EXTERNDEF	msb_u:PROC
			      C 
			      C ;   // find least significant bit in supplied source 512bit (8 QWORDS)
			      C ;	// s16 lsb_u( u64* );
			      C ;   // returns: -1 if no least significant bit, bit number otherwise, bits numbered 0 to 511 inclusive
			      C EXTERNDEF	lsb_u:PROC
			      C 
			      C ENDIF
			      C 
							OPTION			casemap:none
 00000000			.CONST
 00000000			aligned64	SEGMENT			ALIGN (64) 
 00000000  00000008 [		qOnes		QWORD			8 DUP (0ffffffffffffffffh)
	    FFFFFFFFFFFFFFFF
	   ]
 00000000			aligned64	ENDS

 00000000			.CODE
							OPTION			PROLOGUE:none
							OPTION			EPILOGUE:none

				;			shr_u		-	shift supplied source 512bit (8 QWORDS) right, put in destination
				;			Prototype:		void shr_u( u64* destination, u64* source, u32 bits_to_shift)
				;			destination	-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RCX)
				;			source		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RDX)
				;			bits		-	Number of bits to shift. Will fill with zeros, truncate those shifted out (in R8W)
				;			returns		-	nothing (0)
				;			Note: unwound loop(s). More instructions, but fewer executed (no loop save, setup, compare loop), faster, fewer regs used

 00000000			shr_u		PROC			PUBLIC 
 00000000  66| 41/ 83 F8				CMP				R8W, 0						; handle edge case, shift zero bits
	   00
 00000005  75 1A					JNE				notzero
 00000007  48/ 3B CA					CMP				RCX, RDX					
 0000000A  0F 84 000000CC				JE				shr_u_ret					; destination is the same as the source: no copy needed
							Copy512			RCX, RDX					; no shift, just copy (destination, source already in regs)
 00000010  62 61 FD 48/ 6F   1				VMOVDQA64		ZMM31, ZM_PTR [ RDX ]
	   3A
 00000016  62 61 FD 48/ 7F   1				VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
 0000001C  E9 000000BB					JMP				shr_u_ret
 00000021			notzero:
 00000021  66| 41/ 81 F8				CMP				R8W, 512					; handle edge case, shift 512 or more bits
	   0200
 00000027  7C 11					JL				lt512
							Zero512			RCX							; zero destination
 00000029  62 01 85 40/ EF   1				VPXORQ			ZMM31, ZMM31, ZMM31
	   FF
 0000002F  62 61 FD 48/ 7F   1				VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
 00000035  E9 000000A2					JMP				shr_u_ret
 0000003A			lt512:
					IF		__UseZ
 0000003A  62 61 FD 48/ 6F				VMOVDQA64		ZMM31, ZM_PTR [ RDX ]		; load the 8 qwords into zmm reg (note: word order)
	   3A
 00000040  66| 41/ 8B C0				MOV				AX, R8W
 00000044  66| 83 E0 3F					AND				AX, 63
 00000048  74 19					JZ				nobits						; must be multiple of 64 bits to shift, no bits, just words to shift
 0000004A  62 62 FD 48/ 7C				VPBROADCASTQ	ZMM29, RAX					; Nr bits to shift right
	   E8
 00000050  62 01 9D 40/ EF				VPXORQ			ZMM28, ZMM28, ZMM28			; 
	   E4
 00000056  62 03 85 40/ 03				VALIGNQ			ZMM30, ZMM31, ZMM28, 7		; shift copy of words left one word (to get low order bits aligned for shift)
	   F4 07
 0000005D  62 02 8D 40/ 73				VPSHRDVQ		ZMM31, ZMM30, ZMM29			; shift, concatentating low bits of next word with each word to shift in
	   FD
 00000063			nobits:
				;			Word shifts:
 00000063  66| 41/ C1 E8				SHR				R8W, 6
	   06
 00000068  66| 41/ 83 F8				CMP				R8W, 0
	   00
 0000006D  74 67					JE				store_exit			
 0000006F  66| 41/ 83 F8				CMP				R8W, 1
	   01
 00000074  75 09					JNE				test2ws
 00000076  62 03 85 40/ 03				VALIGNQ			ZMM31, ZMM31, ZMM28, 7
	   FC 07
 0000007D  EB 57					JMP				store_exit
 0000007F			test2ws:
 0000007F  66| 41/ 83 F8				CMP				R8W, 2
	   02
 00000084  75 09					JNE				test3ws
 00000086  62 03 85 40/ 03				VALIGNQ			ZMM31, ZMM31, ZMM28, 6
	   FC 06
 0000008D  EB 47					JMP				store_exit
 0000008F			test3ws:
 0000008F  66| 41/ 83 F8				CMP				R8W, 3
	   03
 00000094  75 09					JNE				test4ws
 00000096  62 03 85 40/ 03				VALIGNQ			ZMM31, ZMM31, ZMM28, 5
	   FC 05
 0000009D  EB 37					JMP				store_exit
 0000009F			test4ws:
 0000009F  66| 41/ 83 F8				CMP				R8W, 4
	   04
 000000A4  75 09					JNE				test5ws
 000000A6  62 03 85 40/ 03				VALIGNQ			ZMM31, ZMM31, ZMM28, 4
	   FC 04
 000000AD  EB 27					JMP				store_exit
 000000AF			test5ws:
 000000AF  66| 41/ 83 F8				CMP				R8W, 5
	   05
 000000B4  75 09					JNE				test6ws
 000000B6  62 03 85 40/ 03				VALIGNQ			ZMM31, ZMM31, ZMM28, 3
	   FC 03
 000000BD  EB 17					JMP				store_exit
 000000BF			test6ws:
 000000BF  66| 41/ 83 F8				CMP				R8W, 6
	   06
 000000C4  75 09					JNE				shift7ws
 000000C6  62 03 85 40/ 03				VALIGNQ			ZMM31, ZMM31, ZMM28, 2
	   FC 02
 000000CD  EB 07					JMP				store_exit
 000000CF			shift7ws:
 000000CF  62 03 85 40/ 03				VALIGNQ			ZMM31, ZMM31, ZMM28, 1
	   FC 01
 000000D6			store_exit:
 000000D6  62 61 FD 48/ 7F				VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
					ELSE
					ENDIF
 000000DC			shr_u_ret:
 000000DC  C3						RET		
 000000DD			shr_u		ENDP			

				;			shl_u		-	shift supplied source 512bit (8 QWORDS) left, put in destination
				;			Prototype:		void shl_u( u64* destination, u64* source, u16 bits_to_shift);
				;			destination	-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RCX)
				;			source		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RDX)
				;			bits		-	Number of bits to shift. Will fill with zeros, truncate those shifted out (in R8W)
				;			returns		-	nothing (0)
 000000DD			shl_u		PROC			PUBLIC
 000000DD  41/ 83 F8 00					CMP				R8D, 0						; handle edge case, shift zero bits
 000000E1  75 1A					JNE				notzero
 000000E3  48/ 3B CA					CMP				RCX, RDX
 000000E6  0F 84 000001BE				JE				shl_u_ret
							Copy512			RCX, RDX					; no shift, just copy (destination, source already in regs)
 000000EC  62 61 FD 48/ 6F   1				VMOVDQA64		ZMM31, ZM_PTR [ RDX ]
	   3A
 000000F2  62 61 FD 48/ 7F   1				VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
 000000F8  E9 000001AD					JMP				shl_u_ret
 000000FD			notzero:
 000000FD  41/ 81 F8					CMP				R8D, 512					; handle edge case, shift 512 or more bits
	   00000200
 00000104  7C 11					JL				not512
							Zero512			RCX							; zero destination
 00000106  62 01 85 40/ EF   1				VPXORQ			ZMM31, ZMM31, ZMM31
	   FF
 0000010C  62 61 FD 48/ 7F   1				VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
 00000112  E9 00000193					JMP				shl_u_ret
 00000117			not512:
				;	copy source to destination, offsetting words if Nr to shift / 64 > 0
 00000117  51						PUSH			RCX
 00000118  41/ 51					PUSH			R9
 0000011A  41/ 52					PUSH			R10
 0000011C  41/ 53					PUSH			R11
 0000011E  4C/ 8B D9					MOV				R11, RCX					; destination address moved/saved, free up C for word shift counter
 00000121  48/ 33 C9					XOR				RCX, RCX
 00000124  48/ 33 C0					XOR				RAX, RAX
 00000127  66| 41/ 8B C0				MOV				AX, R8W				
 0000012B  48/ C1 E8 06					SHR				RAX, 6						; divide shift count by 64 giving word shift count (retain orig count in 8)
 0000012F  48/ 83 F8 00					CMP				RAX, 0
 00000133  75 09					JNE				shiftwords
 00000135  4C/ 3B DA					CMP				R11, RDX
 00000138  0F 84 0000009F				JE				destsrcsame
 0000013E			shiftwords:
 0000013E  48/ 8B C8					MOV				RCX, RAX					; word shift counter to RCX
 00000141  48/ 33 C0					XOR				RAX, RAX
 00000144  48/ 83 F9 07					CMP				RCX, 7
 00000148  7F 07					JG				wsf1						; > 7? 
 0000014A  48/ 8B 04 CA					MOV				RAX, [RDX + RCX * 8]		; get offset word
 0000014E  48/ FF C1					INC				RCX
 00000151  49/ 89 03		wsf1:		MOV				[R11 + 0 * 8], RAX			; move it (or zero) to first 
 00000154  48/ 33 C0					XOR				RAX, RAX
 00000157  48/ 83 F9 07					CMP				RCX, 7
 0000015B  7F 07					JG				wsf2
 0000015D  48/ 8B 04 CA					MOV				RAX, [RDX + RCX * 8]
 00000161  48/ FF C1					INC				RCX
 00000164  49/ 89 43 08		wsf2:		MOV				[R11 + 1 * 8], RAX
 00000168  48/ 33 C0					XOR				RAX, RAX
 0000016B  48/ 83 F9 07					CMP				RCX, 7
 0000016F  7F 07					JG				wsf3
 00000171  48/ 8B 04 CA					MOV				RAX, [RDX + RCX * 8]
 00000175  48/ FF C1					INC				RCX
 00000178  49/ 89 43 10		wsf3:		MOV				[R11 + 2 * 8], RAX
 0000017C  48/ 33 C0					XOR				RAX, RAX
 0000017F  48/ 83 F9 07					CMP				RCX, 7
 00000183  7F 07					JG				wsf4
 00000185  48/ 8B 04 CA					MOV				RAX, [RDX + RCX * 8]
 00000189  48/ FF C1					INC				RCX
 0000018C  49/ 89 43 18		wsf4:		MOV				[R11 + 3 * 8], RAX
 00000190  48/ 33 C0					XOR				RAX, RAX
 00000193  48/ 83 F9 07					CMP				RCX, 7
 00000197  7F 07					JG				wsf5
 00000199  48/ 8B 04 CA					MOV				RAX, [RDX + RCX * 8]
 0000019D  48/ FF C1					INC				RCX
 000001A0  49/ 89 43 20		wsf5:       MOV				[R11 + 4 * 8], RAX
 000001A4  48/ 33 C0					XOR				RAX, RAX
 000001A7  48/ 83 F9 07					CMP				RCX, 7
 000001AB  7F 07					JG				wsf6
 000001AD  48/ 8B 04 CA					MOV				RAX, [RDX + RCX * 8]
 000001B1  48/ FF C1					INC				RCX
 000001B4  49/ 89 43 28		wsf6:		MOV				[R11 + 5 * 8], RAX
 000001B8  48/ 33 C0					XOR				RAX, RAX
 000001BB  48/ 83 F9 07					CMP				RCX, 7
 000001BF  7F 07					JG				wsf7
 000001C1  48/ 8B 04 CA					MOV				RAX, [RDX + RCX * 8]
 000001C5  48/ FF C1					INC				RCX
 000001C8  49/ 89 43 30		wsf7:		MOV				[R11 + 6 * 8], RAX
 000001CC  48/ 33 C0					XOR				RAX, RAX
 000001CF  48/ 83 F9 07					CMP				RCX, 7
 000001D3  7F 04					JG				wsf8
 000001D5  48/ 8B 04 CA					MOV				RAX, [RDX + RCX * 8]
 000001D9  49/ 89 43 38		wsf8:		MOV				[R11 + 7 * 8], RAX
 000001DD			destsrcsame:

				; RCX: needed for cl shift counts; use RAX for load/store/shift, RDX for shift/save, R9 for counter/index, r10 bits left (exch with rcx for bits right), R11 for destination
 000001DD  48/ C7 C1					MOV				RCX, 03Fh					; mask for last six bits of shift counter
	   0000003F
 000001E4  66| 41/ 23 C8				AND				CX, R8W						; passed bit count, now in RCX, ECX, CX, and CL how many bits to shift right
 000001E8  66| 83 F9 00					CMP				CX, 0
 000001EC  0F 84 000000B1				JE				nobitstoshift				; 
 000001F2  49/ C7 C2					MOV				R10, 64
	   00000040
 000001F9  4C/ 2B D1					SUB				R10, RCX					; 64 - bit shift count (bits at high end of word that survive the shift) XCHG r10, RCX to use CL as shift count

 000001FC  49/ 8B 43 38					MOV				RAX, [R11 + 7 * 8]
 00000200  49/ D3 63 38					SHL				Q_PTR [R11 + 7 * 8], CL		; first word shifted

 00000204  49/ 87 CA					XCHG			RCX, R10
 00000207  48/ D3 E8					SHR				RAX, CL
 0000020A  49/ 87 CA					XCHG			RCX, R10
 0000020D  4D/ 8B 4B 30					MOV				R9, [R11 + 6 * 8]
 00000211  49/ D3 63 30					SHL				Q_PTR [R11 + 6 * 8], CL		; second word shifted 
 00000215  49/ 09 43 30					OR				Q_PTR [R11 + 6 * 8], RAX	; and low bits ORd in
 00000219  49/ 8B C1					MOV				RAX, R9
							
 0000021C  49/ 87 CA					XCHG			RCX, R10
 0000021F  48/ D3 E8					SHR				RAX, CL
 00000222  49/ 87 CA					XCHG			RCX, R10
 00000225  4D/ 8B 4B 28					MOV				R9, [R11 + 5 * 8]
 00000229  49/ D3 63 28					SHL				Q_PTR [R11 + 5 * 8], CL		; third word shifted 
 0000022D  49/ 09 43 28					OR				Q_PTR [R11 + 5 * 8], RAX	; and low bits ORd in
 00000231  49/ 8B C1					MOV				RAX, R9
							
 00000234  49/ 87 CA					XCHG			RCX, R10
 00000237  48/ D3 E8					SHR				RAX, CL
 0000023A  49/ 87 CA					XCHG			RCX, R10
 0000023D  4D/ 8B 4B 20					MOV				R9, [R11 + 4 * 8]
 00000241  49/ D3 63 20					SHL				Q_PTR [R11 + 4 * 8], CL		; fourth word shifted 
 00000245  49/ 09 43 20					OR				Q_PTR [R11 + 4 * 8], RAX	; and low bits ORd in
 00000249  49/ 8B C1					MOV				RAX, R9
							
 0000024C  49/ 87 CA					XCHG			RCX, R10
 0000024F  48/ D3 E8					SHR				RAX, CL
 00000252  49/ 87 CA					XCHG			RCX, R10
 00000255  4D/ 8B 4B 18					MOV				R9, [R11 + 3 * 8]
 00000259  49/ D3 63 18					SHL				Q_PTR [R11 + 3 * 8], CL		; fifth word shifted 
 0000025D  49/ 09 43 18					OR				Q_PTR [R11 + 3 * 8], RAX	; and low bits ORd in
 00000261  49/ 8B C1					MOV				RAX, R9
							
 00000264  49/ 87 CA					XCHG			RCX, R10
 00000267  48/ D3 E8					SHR				RAX, CL
 0000026A  49/ 87 CA					XCHG			RCX, R10
 0000026D  4D/ 8B 4B 10					MOV				R9, [R11 + 2 * 8]
 00000271  49/ D3 63 10					SHL				Q_PTR [R11 + 2 * 8], CL		; sixth word shifted 
 00000275  49/ 09 43 10					OR				Q_PTR [R11 + 2 * 8], RAX	; and low bits ORd in
 00000279  49/ 8B C1					MOV				RAX, R9
							
 0000027C  49/ 87 CA					XCHG			RCX, R10
 0000027F  48/ D3 E8					SHR				RAX, CL
 00000282  49/ 87 CA					XCHG			RCX, R10
 00000285  4D/ 8B 4B 08					MOV				R9, [R11 + 1 * 8]
 00000289  49/ D3 63 08					SHL				Q_PTR [R11 + 1 * 8], CL		; seventh word shifted 
 0000028D  49/ 09 43 08					OR				Q_PTR [R11 + 1 * 8], RAX	; and low bits ORd in	
 00000291  49/ 8B C1					MOV				RAX, R9
										
 00000294  49/ 87 CA					XCHG			RCX, R10
 00000297  48/ D3 E8					SHR				RAX, CL
 0000029A  49/ 87 CA					XCHG			RCX, R10
 0000029D  49/ D3 23					SHL				Q_PTR [R11 + 0 * 8], CL		; eigth word shifted 
 000002A0  49/ 09 03					OR				Q_PTR [R11 + 0 * 8], RAX	; and low bits ORd in	
							
 000002A3			nobitstoshift:
 000002A3  41/ 5B					POP				R11							; restore regs to "as-called" values
 000002A5  41/ 5A					POP				R10
 000002A7  41/ 59					POP				R9
 000002A9  59						POP				RCX
 000002AA			shl_u_ret:
 000002AA  C3						RET	
 000002AB			shl_u		ENDP

				;			and_u		-	logical 'AND' bits in lh_op, rh_op, put result in destination
				;			Prototype:		void and_u( u64* destination, u64* lh_op, u64* rh_op);
				;			destination	-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RCX)
				;			lh_op		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RDX)
				;			rh_op		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in R8)
				;			returns		-	nothing (0)
 000002AB			and_u		PROC			PUBLIC 
					IF		__UseZ		
 000002AB  62 61 FD 48/ 6F				VMOVDQA64		ZMM31, ZM_PTR [ RDX ]			
	   3A
 000002B1  62 41 85 40/ DB				VPANDQ			ZMM31, ZMM31, ZM_PTR [ R8 ]
	   38
 000002B7  62 61 FD 48/ 7F				VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
					ELSEIF	__UseY
					ENDIF
 000002BD  C3						RET		
 000002BE			and_u		ENDP

				;			or_u		-	logical 'OR' bits in lh_op, rh_op, put result in destination
				;			Prototype:		void or_u( u64* destination, u64* lh_op, u64* rh_op);
				;			destination	-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RCX)
				;			lh_op		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RDX)
				;			rh_op		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in R8)
				;			returns		-	nothing (0)
 000002BE			or_u		PROC			PUBLIC
					IF		__UseZ		
 000002BE  62 61 FD 48/ 6F				VMOVDQA64		ZMM31, ZM_PTR [ RDX ]			
	   3A
 000002C4  62 41 85 40/ EB				VPORQ			ZMM31, ZMM31, ZM_PTR [ R8 ]
	   38
 000002CA  62 61 FD 48/ 7F				VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
					ELSEIF	__UseY
					ENDIF
 000002D0  C3						RET 
 000002D1			or_u		ENDP

				;			not_u		-	logical 'NOT' bits in source, put result in destination
				;			Prototype:		void not_u( u64* destination, u64* source);
				;			destination	-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RCX)
				;			source		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RDX)
				;			returns		-	nothing (0)
 000002D1			not_u		PROC			PUBLIC
					IF		__UseZ	
 000002D1  62 61 FD 48/ 6F				VMOVDQA64		ZMM31, ZM_PTR [RDX]			
	   3A
 000002D7  62 61 85 40/ DF				VPANDNQ			ZMM31, ZMM31, qOnes
	   3D 00000000 R
 000002E1  62 61 FD 48/ 7F				VMOVDQA64		ZM_PTR [RCX], ZMM31
	   39
					ELSEIF	__UseY
					ENDIF
 000002E7  C3						RET	
 000002E8			not_u		ENDP

				;			msb_u		-	find most significant bit in supplied source 512bit (8 QWORDS)
				;			Prototype:		s16 msb_u( u64* source );
				;			source		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RCX)
				;			returns		-	-1 if no most significant bit, bit number otherwise, bits numbered 0 to 511 inclusive
							OPTION			PROLOGUE:none
							OPTION			EPILOGUE:none
 000002E8			msb_u		PROC			PUBLIC
 000002E8  41/ 51					PUSH			R9
 000002EA  41/ 52					PUSH			R10
 000002EC  4D/ 33 D2					XOR				R10, R10
 000002EF  41/ BA					MOV				R10D, -1
	   FFFFFFFF
 000002F5			again:
 000002F5  41/ FF C2					INC				R10D
 000002F8  41/ 83 FA 08					CMP				R10D, 8
 000002FC  75 07					JNZ				chkbits
 000002FE  B8 FFFFFFFF					MOV				EAX, -1
 00000303  EB 17					JMP				rret
 00000305			chkbits:
 00000305  4A/ 0F BD 04 D1				BSR				RAX, [ RCX ]  + [ R10 * 8 ]
 0000030A  74 E9					JZ				again
 0000030C  41/ BB					MOV				R11D, 7
	   00000007
 00000312  45/ 2B DA					SUB				R11D, R10D
 00000315  41/ C1 E3 06					SHL				R11D, 6
 00000319  41/ 03 C3					ADD				EAX, R11D
 0000031C			rret:
 0000031C  41/ 5A					POP				R10
 0000031E  41/ 59					POP				R9
 00000320  C3						RET		
 00000321			msb_u		ENDP

				;			lsb_u		-	find least significant bit in supplied source 512bit (8 QWORDS)
				;			Prototype:		s16 lsb_u( u64* source );
				;			source		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RCX)
				;			returns		-	-1 if no least significant bit, bit number otherwise, bits numbered 0 to 511 inclusive
							OPTION			PROLOGUE:none
							OPTION			EPILOGUE:none
 00000321			lsb_u		PROC			PUBLIC
 00000321  41/ 51					PUSH			R9
 00000323  41/ 52					PUSH			R10
 00000325  49/ C7 C2					MOV				R10, 8
	   00000008
 0000032C			again:
 0000032C  41/ 83 EA 01					SUB				R10D, 1
 00000330  73 07					JNC				chkbits
 00000332  B8 FFFFFFFF					MOV				EAX, -1
 00000337  EB 17					JMP				lret
 00000339			chkbits:
 00000339  4A/ 0F BC 04 D1				BSF				RAX, [ RCX ] + [ R10 * 8 ]
 0000033E  74 EC					JZ				again
 00000340  41/ BB					MOV				R11D, 7
	   00000007
 00000346  45/ 2B DA					SUB				R11D, R10D
 00000349  41/ C1 E3 06					SHL				R11D, 6
 0000034D  41/ 03 C3					ADD				EAX, R11D
 00000350			lret:
 00000350  41/ 5A					POP				R10
 00000352  41/ 59					POP				R9
 00000354  C3						RET
 00000355			lsb_u		ENDP

							END
Microsoft (R) Macro Assembler (x64) Version 14.40.33811.0   06/12/24 11:42:07
ui512b.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

Copy512  . . . . . . . . . . . .	Proc
Zero512  . . . . . . . . . . . .	Proc


Segments:

                N a m e                  Length   Align   Class

CONST  . . . . . . . . . . . . .	 00000000 16	  'CONST'	 ReadOnly
aligned64  . . . . . . . . . . .	 00000040 64	  


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

and_u  . . . . . . . . . . . . .	P 	 000002AB _TEXT	Length= 00000013 Public
lsb_u  . . . . . . . . . . . . .	P 	 00000321 _TEXT	Length= 00000034 Public
  again  . . . . . . . . . . . .	L 	 0000032C _TEXT	
  chkbits  . . . . . . . . . . .	L 	 00000339 _TEXT	
  lret . . . . . . . . . . . . .	L 	 00000350 _TEXT	
msb_u  . . . . . . . . . . . . .	P 	 000002E8 _TEXT	Length= 00000039 Public
  again  . . . . . . . . . . . .	L 	 000002F5 _TEXT	
  chkbits  . . . . . . . . . . .	L 	 00000305 _TEXT	
  rret . . . . . . . . . . . . .	L 	 0000031C _TEXT	
not_u  . . . . . . . . . . . . .	P 	 000002D1 _TEXT	Length= 00000017 Public
or_u . . . . . . . . . . . . . .	P 	 000002BE _TEXT	Length= 00000013 Public
shl_u  . . . . . . . . . . . . .	P 	 000000DD _TEXT	Length= 000001CE Public
  notzero  . . . . . . . . . . .	L 	 000000FD _TEXT	
  not512 . . . . . . . . . . . .	L 	 00000117 _TEXT	
  shiftwords . . . . . . . . . .	L 	 0000013E _TEXT	
  wsf1 . . . . . . . . . . . . .	L 	 00000151 _TEXT	
  wsf2 . . . . . . . . . . . . .	L 	 00000164 _TEXT	
  wsf3 . . . . . . . . . . . . .	L 	 00000178 _TEXT	
  wsf4 . . . . . . . . . . . . .	L 	 0000018C _TEXT	
  wsf5 . . . . . . . . . . . . .	L 	 000001A0 _TEXT	
  wsf6 . . . . . . . . . . . . .	L 	 000001B4 _TEXT	
  wsf7 . . . . . . . . . . . . .	L 	 000001C8 _TEXT	
  wsf8 . . . . . . . . . . . . .	L 	 000001D9 _TEXT	
  destsrcsame  . . . . . . . . .	L 	 000001DD _TEXT	
  nobitstoshift  . . . . . . . .	L 	 000002A3 _TEXT	
  shl_u_ret  . . . . . . . . . .	L 	 000002AA _TEXT	
shr_u  . . . . . . . . . . . . .	P 	 00000000 _TEXT	Length= 000000DD Public
  notzero  . . . . . . . . . . .	L 	 00000021 _TEXT	
  lt512  . . . . . . . . . . . .	L 	 0000003A _TEXT	
  nobits . . . . . . . . . . . .	L 	 00000063 _TEXT	
  test2ws  . . . . . . . . . . .	L 	 0000007F _TEXT	
  test3ws  . . . . . . . . . . .	L 	 0000008F _TEXT	
  test4ws  . . . . . . . . . . .	L 	 0000009F _TEXT	
  test5ws  . . . . . . . . . . .	L 	 000000AF _TEXT	
  test6ws  . . . . . . . . . . .	L 	 000000BF _TEXT	
  shift7ws . . . . . . . . . . .	L 	 000000CF _TEXT	
  store_exit . . . . . . . . . .	L 	 000000D6 _TEXT	
  shr_u_ret  . . . . . . . . . .	L 	 000000DC _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

B_PTR  . . . . . . . . . . . . .	Text   	 BYTE PTR
CPEQ . . . . . . . . . . . . . .	Number	 00000000h   
CPGE . . . . . . . . . . . . . .	Number	 00000005h   
CPGT . . . . . . . . . . . . . .	Number	 00000006h   
CPLE . . . . . . . . . . . . . .	Number	 00000002h   
CPLT . . . . . . . . . . . . . .	Number	 00000001h   
CPNE . . . . . . . . . . . . . .	Number	 00000004h   
D_PTR  . . . . . . . . . . . . .	Text   	 DWORD PTR
Q_PTR  . . . . . . . . . . . . .	Text   	 QWORD PTR
W_PTR  . . . . . . . . . . . . .	Text   	 WORD PTR
XM_PTR . . . . . . . . . . . . .	Text   	 XMMWORD PTR
YM_PTR . . . . . . . . . . . . .	Text   	 YMMWORD PTR
ZM_PTR . . . . . . . . . . . . .	Text   	 ZMMWORD PTR
__UseQ . . . . . . . . . . . . .	Number	 00000000h   
__UseX . . . . . . . . . . . . .	Number	 00000000h   
__UseY . . . . . . . . . . . . .	Number	 00000000h   
__UseZ . . . . . . . . . . . . .	Number	 00000001h   
add_uT64 . . . . . . . . . . . .	L 	 00000000 External
add_u  . . . . . . . . . . . . .	L 	 00000000 External
compare_uT64 . . . . . . . . . .	L 	 00000000 External
compare_u  . . . . . . . . . . .	L 	 00000000 External
copy_u . . . . . . . . . . . . .	L 	 00000000 External
m32BCST  . . . . . . . . . . . .	Text   	 DWORD BCST
m64BCST  . . . . . . . . . . . .	Text   	 QWORD BCST
qOnes  . . . . . . . . . . . . .	QWord	 00000000 aligned64	
set_uT64 . . . . . . . . . . . .	L 	 00000000 External
sub_uT64 . . . . . . . . . . . .	L 	 00000000 External
sub_u  . . . . . . . . . . . . .	L 	 00000000 External
ui512aMacros_INC . . . . . . . .	Text   	 1
ui512bMacros_INC . . . . . . . .	Text   	 1
zero_u . . . . . . . . . . . . .	L 	 00000000 External

	   0 Warnings
	   0 Errors
