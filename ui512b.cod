Microsoft (R) Macro Assembler (x64) Version 14.42.34436.0   02/07/25 10:08:53
ui512b.asm						     Page 1 - 1


				;
				;			ui512b
				;
				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;			File:			ui512b.asm
				;			Author:			John G. Lynch
				;			Legal:			Copyright @2024, per MIT License below
				;			Date:			June 11, 2024
				;
				;			Notes:
				;				ui512 is a small project to provide basic operations for a variable type of unsigned 512 bit integer.
				;
				;				ui512a provides basic operations: zero, copy, compare, add, subtract.
				;				ui512b provides basic bit-oriented operations: shift left, shift right, and, or, not, least significant bit and most significant bit.
				;               ui512md provides multiply and divide.
				;
				;				It is written in assembly language, using the MASM (ml64) assembler provided as an option within Visual Studio.
				;				(currently using VS Community 2022 17.9.6)
				;
				;				It provides external signatures that allow linkage to C and C++ programs,
				;				where a shell/wrapper could encapsulate the methods as part of an object.
				;
				;				It has assembly time options directing the use of Intel processor extensions: AVX4, AVX2, SIMD, or none:
				;				(Z (512), Y (256), or X (128) registers, or regular Q (64bit)).
				;
				;				If processor extensions are used, the caller must align the variables declared and passed
				;				on the appropriate byte boundary (e.g. alignas 64 for 512)
				;
				;				This module is very light-weight (less than 1K bytes) and relatively fast,
				;				but is not intended for all processor types or all environments. 
				;
				;				Use for private (hobbyist), or instructional, or as an example for more ambitious projects is all it is meant to be.
				;
				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;
				;			MIT License
				;
				;			Copyright (c) 2024 John G. Lynch
				;
				;				Permission is hereby granted, free of charge, to any person obtaining a copy
				;				of this software and associated documentation files (the "Software"), to deal
				;				in the Software without restriction, including without limitation the rights
				;				to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
				;				copies of the Software, and to permit persons to whom the Software is
				;				furnished to do so, subject to the following conditions:
				;
				;				The above copyright notice and this permission notice shall be included in all
				;				copies or substantial portions of the Software.
				;
				;				THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
				;				IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
				;				FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
				;				AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
				;				LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
				;				OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
				;				SOFTWARE.
				;
				;--------------------------------------------------------------------------------------------------------------------------------------------------------------

							INCLUDE			ui512aMacros.inc
			      C .nolist
			      C .list
			      C IFNDEF						ui512aMacros_INC
 = 1			      C ui512aMacros_INC EQU		<1>
			      C 
			      C ;
			      C ;--------------------------------------------------------------------------------------------------------------------------------------------------------------
			      C ;
			      C ;           header file equivalent extern declarations
			      C ;			EXTERN "C" signatures (from ui512a.asm)
			      C 
			      C ;	// void zero_u ( u64* destarr ); 
			      C ;	// fill supplied 512bit (8 QWORDS) with zero
			      C EXTERNDEF	zero_u:PROC
			      C 
			      C ;	// void copy_u ( u64* destarr, u64* srcarr );
			      C ;	// copy supplied 512bit (8 QWORDS) source to supplied destination
			      C EXTERNDEF	copy_u:PROC
			      C 
			      C ;	// void set_uT64 ( u64* destarr, u64 value );
			      C ;	// set supplied destination 512 bit to supplied u64 value
			      C EXTERNDEF	set_uT64:PROC
			      C 
			      C ;	// int compare_u ( u64* lh_op, u64* rh_op );
			      C ;	// compare supplied 512bit (8 QWORDS) LH operand to supplied RH operand
			      C ;	// returns: (0) for equal, -1 for less than, 1 for greater than (logical, unsigned compare)
			      C EXTERNDEF	compare_u:PROC
			      C 
			      C ;	// int compare_uT64 ( u64* lh_op, u64 rh_op );
			      C ;	// compare supplied 512bit (8 QWORDS) LH operand to supplied 64bit RH operand (value)
			      C ;	// returns: (0) for equal, -1 for less than, 1 for greater than (logical, unsigned compare)
			      C EXTERNDEF	compare_uT64:PROC
			      C 
			      C ;	// void add_u ( u64* sum, u64* addend1, u64* addend2 );
			      C ;	// add supplied 512bit (8 QWORDS) sources to supplied destination
			      C ;	// returns: zero for no carry, 1 for carry (overflow)
			      C EXTERNDEF	add_u:PROC
			      C 
			      C ;	// s32 add_uT64 ( u64* sum, u64* addend1, u64 addend2 );
			      C ;	// add 64bit QWORD (value) to supplied 512bit (8 QWORDS), place in supplied destination
			      C ;	// returns: zero for no carry, 1 for carry (overflow)
			      C EXTERNDEF	add_uT64:PROC
			      C 
			      C ;	// s32 sub_u ( u64* difference, u64* left operand, u64* right operand );
			      C ;	// subtract supplied 512bit (8 QWORDS) RH OP from LH OP giving difference in destination
			      C ;	// returns: zero for no borrow, 1 for borrow (underflow)
			      C EXTERNDEF	sub_u:PROC
			      C 
			      C ;	// s32 sub_uT64( u64* difference, u64* left operand, u64 right operand );
			      C ;	// subtract supplied 64 bit right hand (64 bit value) op from left hand (512 bit) giving difference
			      C ;	// returns: zero for no borrow, 1 for borrow (underflow)
			      C EXTERNDEF	sub_uT64:PROC
			      C 
			      C ;--------------------------------------------------------------------------------------------------------------------------------------------------------------
			      C ;			Configuration choices
 = 00000001		      C __UseZ		EQU				1							; Use AVX4 processor features (512 bit registers and instructions)
 = 00000000		      C __UseY		EQU				0							; Use AVX2 processor features (256 bit registers and instructions)
 = 00000000		      C __UseX		EQU				0							; Use SIMD/SSE processor features (128 bit registers and instructions)
 = 00000000		      C __UseQ		EQU				0							; Do not use extensions, use standard x64 bit registers and instructions
			      C 
			      C ;           Some coding shortcuts
 = ZMMWORD PTR		      C ZM_PTR      EQU             ZMMWORD PTR
 = YMMWORD PTR		      C YM_PTR      EQU             YMMWORD PTR
 = XMMWORD PTR		      C XM_PTR      EQU             XMMWORD PTR
 = QWORD PTR		      C Q_PTR       EQU             QWORD PTR
 = DWORD PTR		      C D_PTR       EQU             DWORD PTR
 = WORD PTR		      C W_PTR       EQU             WORD PTR
 = BYTE PTR		      C B_PTR       EQU             BYTE PTR
 = DWORD BCST		      C m32BCST     EQU				DWORD BCST
 = QWORD BCST		      C m64BCST     EQU				QWORD BCST
			      C 
			      C ;			mask codes (for compares)
 = 00000000		      C CPEQ		EQU				0
 = 00000001		      C CPLT		EQU				1
 = 00000002		      C CPLE		EQU				2
 = 00000004		      C CPNE		EQU				4
 = 00000005		      C CPGE		EQU				5
 = 00000006		      C CPGT		EQU				6
			      C 
			      C ;
			      C ;--------------------------------------------------------------------------------------------------------------------------------------------------------------
			      C ;==========================================================================================
			      C ;           Notes on x64 calling conventions        aka "fast call"
			      C ; ref: https://learn.microsoft.com/en-us/cpp/build/x64-calling-convention?view=msvc-170
			      C ; The first four parameters are passed in registers: RCX, RDX, R8, R9 if integer or address
			      C ; if floating point XMM0L, XMM1L, XMM2L, XMM3L
			      C ; return (if any) is in EAX
			      C ;===========================================================================================
			      C ;
			      C ;===========================================================================================
			      C ; RAX, RCX, RDX, R8, R9, R10, R11 are considered volatile, and do not need to be saved
			      C ; XMM0, YMM0, ZMM0 and  ..1, ..2, ..3, ..4, and ..5 are considered volatile,
			      C ;	and do not need to be saved
			      C ;  ZMM16 to ZMM31: volatile, also do not need to be zeroed to resume full clock speeds
			      C ;
			      C ; R12, R13, R14, R15, RDI, RSI, RBX, RBP, RSP are non-volatile and if used, must be restored
			      C ; XMM, YMM, and ZMM ..6 thru 15 are non-volatile and if used, must be restored
			      C ;
			      C ; A "leaf" function is one that does not call and does not change non volatile registers
			      C ; leaf functionss therefore do not need frame, prolog or epilog
			      C ;
			      C ;===========================================================================================
			      C 
			      C ;
			      C ;--------------------------------------------------------------------------------------------------------------------------------------------------------------
			      C ;===============================================
			      C ;          Local macros
			      C ;===============================================
			      C 
			      C ;
			      C ;--------------------------------------------------------------------------------------------------------------------------------------------------------------
			      C ;
			      C ;			Zero a 512 bit destination, conditional assembly based on configuration parameters
			      C ;
			      C Zero512		MACRO			dest
			      C 	IF		__UseZ
			      C 			VPXORQ			ZMM31, ZMM31, ZMM31
			      C 			VMOVDQA64		ZM_PTR [ dest ], ZMM31
			      C 	ELSEIF	__UseY
			      C 			VPXORQ			YMM4, YMM4, YMM4
			      C 			VMOVDQA64		YM_PTR [ dest ] + [ 0 * 8 ], YMM4
			      C 			VMOVDQA64		YM_PTR [ dest ] + [ 4 * 8 ], YMM4
			      C 	ELSEIF	__UseX
			      C 			PXOR			XMM4, XMM4
			      C 			MOVDQA			XM_PTR [ dest ] + [ 0 * 8 ], XMM4
			      C 			MOVDQA			XM_PTR [ dest ] + [ 2 * 8 ], XMM4
			      C 			MOVDQA			XM_PTR [ dest ] + [ 4 * 8 ], XMM4
			      C 			MOVDQA			XM_PTR [ dest ] + [ 6 * 8 ], XMM4			
			      C 	ELSE
			      C 			XOR				RAX, RAX
			      C 			MOV				[ dest ] + [ 0 * 8 ], RAX
			      C 			MOV				[ dest ] + [ 1 * 8 ], RAX
			      C 			MOV				[ dest ] + [ 2 * 8 ], RAX
			      C 			MOV				[ dest ] + [ 3 * 8 ], RAX
			      C 			MOV				[ dest ] + [ 4 * 8 ], RAX
			      C 			MOV				[ dest ] + [ 5 * 8 ], RAX
			      C 			MOV				[ dest ] + [ 6 * 8 ], RAX
			      C 			MOV				[ dest ] + [ 7 * 8 ], RAX
			      C 	ENDIF
			      C 			ENDM
			      C 
			      C ;
			      C ;--------------------------------------------------------------------------------------------------------------------------------------------------------------
			      C ;
			      C ;			Copy a 512 bit source to destination, conditional assembly based on configuration parameters
			      C ;
			      C Copy512		MACRO			dest, src
			      C 	IF		__UseZ
			      C 			VMOVDQA64		ZMM31, ZM_PTR [ src ]
			      C 			VMOVDQA64		ZM_PTR [ dest ], ZMM31
			      C 	ELSEIF	__UseY
			      C 			VMOVDQA64		YMM4, YM_PTR [ src ] + [ 0 * 8 ]
			      C 			VMOVDQA64		YM_PTR [ dest ] + [ 0 * 8 ], YMM4
			      C 			VMOVDQA64		YMM5, YM_PTR [ src ] + [ 4 * 8 ]
			      C 			VMOVDQA64		YM_PTR [ dest ] + [ 4 * 8 ], YMM5
			      C 	ELSEIF	__UseX
			      C 			MOVDQA			XMM4, XM_PTR [ src ] + [ 0 * 8 ]
			      C 			MOVDQA			XM_PTR [ dest ] + [ 0 * 8 ], XMM4
			      C 			MOVDQA			XMM3, XM_PTR [ src ] + [ 2 * 8 ]
			      C 			MOVDQA			XM_PTR [ dest ] + [ 2 * 8 ], XMM3
			      C 			MOVDQA			XMM4, XM_PTR [ src ] + [ 4 * 8 ]
			      C 			MOVDQA			XM_PTR [ dest ] + [ 4 * 8 ], XMM4
			      C 			MOVDQA			XMM3, XM_PTR [ src ] + [ 6 * 8 ]
			      C 			MOVDQA			XM_PTR [ dest ] + [ 6 * 8 ], XMM3
			      C 	ELSE
			      C 			MOV				RAX, [ src ] + [ 0 * 8 ]
			      C 			MOV				[ dest ] + [ 0 * 8 ], RAX
			      C 			MOV				RAX, [ src ] + [ 1 * 8 ]
			      C 			MOV				[ dest ] + [ 1 * 8 ], RAX
			      C 			MOV				RAX, [ src ] + [ 2 * 8 ]
			      C 			MOV				[ dest ] + [ 2 * 8 ], RAX
			      C 			MOV				RAX, [ src ] + [ 3 * 8 ]
			      C 			MOV				[ dest ] + [ 3 * 8 ], RAX
			      C 			MOV				RAX, [ src ] + [ 4 * 8 ]
			      C 			MOV				[ dest ] + [ 4 * 8 ], RAX
			      C 			MOV				RAX, [ src ] + [ 5 * 8 ]
			      C 			MOV				[ dest ] + [ 5 * 8 ], RAX
			      C 			MOV				RAX, [ src ] + [ 6 * 8 ]
			      C 			MOV				[ dest ] + [ 6 * 8 ], RAX
			      C 			MOV				RAX, [ src ] + [ 7 * 8 ]
			      C 			MOV				[ dest ] + [ 7 * 8 ], RAX
			      C 	ENDIF
			      C 			ENDM
			      C 
			      C ENDIF
			      C 
							INCLUDE			ui512bMacros.inc
			      C .nolist
			      C .list
			      C IFNDEF						ui512bMacros_INC
 = 1			      C ui512bMacros_INC EQU		<1>
			      C ;           header file equivalent extern declarations
			      C ;			EXTERN "C" signatures (from ui512b.asm)
			      C 
			      C ;   // void shr_u ( u64* destination, u64* source, u32 bits_to_shift )
			      C ;   // shift supplied source 512bit (8 QWORDS) right, put in destination
			      C EXTERNDEF	shr_u:PROC
			      C 
			      C ;   // void shl_u ( u64* destination, u64* source, u16 bits_to_shift );
			      C ;   // shift supplied source 512bit (8 QWORDS) left, put in destination
			      C EXTERNDEF	shl_u:PROC
			      C 
			      C ;   // void and_u ( u64* destination, u64* lh_op, u64* rh_op );
			      C ;   // logical 'AND' bits in lh_op, rh_op, put result in destination
			      C EXTERNDEF	and_u:PROC
			      C 
			      C ;   // logical 'OR' bits in lh_op, rh_op, put result in destination
			      C ;   // void or_u( u64* destination, u64* lh_op, u64* rh_op);
			      C EXTERNDEF	or_u:PROC
			      C 
			      C ;   // logical 'NOT' bits in source, put result in destination
			      C ;	// void not_u( u64* destination, u64* source);
			      C EXTERNDEF	not_u:PROC
			      C 
			      C ;   // find most significant bit in supplied source 512bit (8 QWORDS)
			      C ;	// s16 msb_u( u64* );
			      C ;   // returns: -1 if no most significant bit, bit number otherwise, bits numbered 0 to 511 inclusive
			      C EXTERNDEF	msb_u:PROC
			      C 
			      C ;   // find least significant bit in supplied source 512bit (8 QWORDS)
			      C ;	// s16 lsb_u( u64* );
			      C ;   // returns: -1 if no least significant bit, bit number otherwise, bits numbered 0 to 511 inclusive
			      C EXTERNDEF	lsb_u:PROC
			      C 
			      C ENDIF
			      C 
							OPTION			casemap:none
 00000000			.CONST

 00000000			aligned64   SEGMENT         ALIGN (64)
 00000000  00000008 [		qOnes       QWORD           8 DUP (0ffffffffffffffffh)
	    FFFFFFFFFFFFFFFF
	   ]
 00000000			aligned64   ENDS

 00000000			.CODE		ui512b
				            OPTION          PROLOGUE:none
				            OPTION          EPILOGUE:none

				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;			shr_u		-	shift supplied source 512bit (8 QWORDS) right, put in destination
				;			Prototype:		void shr_u( u64* destination, u64* source, u32 bits_to_shift)
				;			destination	-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RCX)
				;			source		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RDX)
				;			bits		-	Number of bits to shift. Will fill with zeros, truncate those shifted out (in R8W)
				;			returns		-	nothing (0)
				;			Note: unwound loop(s). More instructions, but fewer executed (no loop save, setup, compare loop), faster, fewer regs used

 00000000			shr_u		PROC			PUBLIC
 00000000  66| 41/ 83 F8				CMP				R8W, 0						; handle edge case, shift zero bits
	   00
 00000005  75 1A					JNE				@F
 00000007  48/ 3B CA					CMP				RCX, RDX
 0000000A  0F 84 000000F1				JE				@@shr_u_ret					; destination is the same as the source: no copy needed
							Copy512			RCX, RDX					; no shift, just copy (destination, source already in regs)
 00000010  62 61 FD 48/ 6F   1				VMOVDQA64		ZMM31, ZM_PTR [ RDX ]
	   3A
 00000016  62 61 FD 48/ 7F   1				VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
 0000001C  E9 000000E0					JMP				@@shr_u_ret
 00000021			@@:
 00000021  66| 41/ 81 F8				CMP				R8W, 512					; handle edge case, shift 512 or more bits
	   0200
 00000027  7C 11					JL				@F
							Zero512			RCX							; zero destination
 00000029  62 01 85 40/ EF   1				VPXORQ			ZMM31, ZMM31, ZMM31
	   FF
 0000002F  62 61 FD 48/ 7F   1				VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
 00000035  E9 000000C7					JMP				@@shr_u_ret
 0000003A			@@:
					IF		__UseZ
 0000003A  62 61 FD 48/ 6F				VMOVDQA64		ZMM31, ZM_PTR [ RDX ]		; load the 8 qwords into zmm reg (note: word order)
	   3A
 00000040  49/ 0F B7 C0					MOVZX			RAX, R8W
 00000044  66| 83 E0 3F					AND				AX, 03fh
 00000048  74 19					JZ				@F							; must be multiple of 64 bits to shift, no bits, just words to shift
 0000004A  62 62 FD 48/ 7C				VPBROADCASTQ	ZMM29, RAX					; Nr bits to shift right
	   E8
 00000050  62 01 9D 40/ EF				VPXORQ			ZMM28, ZMM28, ZMM28			; 
	   E4
 00000056  62 03 85 40/ 03				VALIGNQ			ZMM30, ZMM31, ZMM28, 7		; shift copy of words left one word (to get low order bits aligned for shift)
	   F4 07
 0000005D  62 02 8D 40/ 73				VPSHRDVQ		ZMM31, ZMM30, ZMM29			; shift, concatentating low bits of next word with each word to shift in
	   FD
 00000063			@@:
				; with the bits shifted within the words, if the desired shift is more than 64 bits, word shifts are required
				; verify Nr of word shift is zero to seven, use it as index into jump table; jump to appropriate shift
 00000063  66| 41/ C1 E8				SHR				R8W, 6						; divide Nr bits to shift by 64 giving Nr words to shift
	   06
 00000068  49/ 83 E0 07					AND				R8, 07h						; probably not necessary, but ensures a number 0 to 7 for jump table
 0000006C  66| 41/ C1 E0				SHL				R8W, 3						; multiply by 8 to give QWORD index into jump table
	   03
 00000071  48/ 8D 05					LEA				RAX, @jt					; address of jump table
	   0000007E R
 00000078  4C/ 03 C0					ADD				R8, RAX						; add index
 0000007B  41/ FF 20					JMP				Q_PTR [ R8 ]				; jump to routine that shifts the appropriate Nr words
 0000007E			@jt:
 0000007E  00000000000000FB R				QWORD			@@E, @1, @2, @3, @4, @5, @6, @7
	   00000000000000BE R
	   00000000000000C7 R
	   00000000000000D0 R
	   00000000000000D9 R
	   00000000000000E2 R
	   00000000000000EB R
	   00000000000000F4 R
 000000BE  62 03 85 40/ 03	@1:			VALIGNQ			ZMM31, ZMM31, ZMM28, 7		; shifts words in 31 right 7, fills with zero, resulting seven plus filled zero to 31
	   FC 07
 000000C5  EB 34					JMP				@@E
 000000C7  62 03 85 40/ 03	@2:			VALIGNQ			ZMM31, ZMM31, ZMM28, 6		; shifts words in 31 right 6, fills with two zeros, resulting 6 plus 2 filled zero to 31
	   FC 06
 000000CE  EB 2B					JMP				@@E
 000000D0  62 03 85 40/ 03	@3:			VALIGNQ			ZMM31, ZMM31, ZMM28, 5
	   FC 05
 000000D7  EB 22					JMP				@@E
 000000D9  62 03 85 40/ 03	@4:			VALIGNQ			ZMM31, ZMM31, ZMM28, 4
	   FC 04
 000000E0  EB 19					JMP				@@E
 000000E2  62 03 85 40/ 03	@5:			VALIGNQ			ZMM31, ZMM31, ZMM28, 3
	   FC 03
 000000E9  EB 10					JMP				@@E
 000000EB  62 03 85 40/ 03	@6:			VALIGNQ			ZMM31, ZMM31, ZMM28, 2
	   FC 02
 000000F2  EB 07					JMP				@@E
 000000F4  62 03 85 40/ 03	@7:			VALIGNQ			ZMM31, ZMM31, ZMM28, 1
	   FC 01

 000000FB  62 61 FD 48/ 7F	@@E:		VMOVDQA64		ZM_PTR [ RCX ], ZMM31		; store result at callers destination
	   39
					ELSE
					ENDIF
 00000101			@@shr_u_ret:
 00000101  C3						RET		
 00000102			shr_u		ENDP			

				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;			shl_u		-	shift supplied source 512bit (8 QWORDS) left, put in destination
				;			Prototype:		void shl_u( u64* destination, u64* source, u16 bits_to_shift);
				;			destination	-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RCX)
				;			source		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RDX)
				;			bits		-	Number of bits to shift. Will fill with zeros, truncate those shifted out (in R8W)
				;			returns		-	nothing (0)

 00000102			shl_u		PROC			PUBLIC
 00000102  66| 41/ 83 F8				CMP				R8W, 0						; handle edge case, shift zero bits
	   00
 00000107  75 1A					JNE				@F
 00000109  48/ 3B CA					CMP				RCX, RDX
 0000010C  0F 84 000000F1				JE				shl_u_ret
							Copy512			RCX, RDX					; no shift, just copy (destination, source already in regs)
 00000112  62 61 FD 48/ 6F   1				VMOVDQA64		ZMM31, ZM_PTR [ RDX ]
	   3A
 00000118  62 61 FD 48/ 7F   1				VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
 0000011E  E9 000000E0					JMP				shl_u_ret
 00000123			@@:
 00000123  66| 41/ 81 F8				CMP				R8W, 512					; handle edge case, shift 512 or more bits
	   0200
 00000129  7C 11					JL				@F
							Zero512			RCX							; zero destination
 0000012B  62 01 85 40/ EF   1				VPXORQ			ZMM31, ZMM31, ZMM31
	   FF
 00000131  62 61 FD 48/ 7F   1				VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
 00000137  E9 000000C7					JMP				shl_u_ret
 0000013C			@@:
					IF		__UseZ
 0000013C  62 61 FD 48/ 6F				VMOVDQA64		ZMM31, ZM_PTR [ RDX ]		; load the 8 qwords into zmm reg (note: word order)
	   3A
 00000142  49/ 0F B7 C0					MOVZX			RAX, R8W
 00000146  66| 83 E0 3F					AND				AX, 03fh
 0000014A  74 19					JZ				@F							; must be multiple of 64 bits to shift, no bits, just words to shift
				;			Do the shift of bits within the 64 bit words
 0000014C  62 62 FD 48/ 7C				VPBROADCASTQ	ZMM29, RAX					; Nr bits to shift left
	   E8
 00000152  62 01 9D 40/ EF				VPXORQ			ZMM28, ZMM28, ZMM28			; 
	   E4
 00000158  62 03 9D 40/ 03				VALIGNQ			ZMM30, ZMM28, ZMM31, 1		; shift copy of words right one word (to get low order bits aligned for shift)
	   F7 01
 0000015F  62 02 8D 40/ 71				VPSHLDVQ		ZMM31, ZMM30, ZMM29			; shift, concatentating low bits of next word with each word to shift in
	   FD
 00000165			@@:
				; with the bits shifted within the words, if the desired shift is more than 64 bits, word shifts are required
				; verify Nr of word shift is zero to seven, use it as index into jump table; jump to appropriate shift
 00000165  66| 41/ C1 E8				SHR				R8W, 6						; divide Nr bits to shift by 64 giving Nr words to shift
	   06
 0000016A  49/ 83 E0 07					AND				R8, 07h						; probably not necessary, but ensures a number 0 to 7 for jump table
 0000016E  66| 41/ C1 E0				SHL				R8W, 3						; multiply by 8 to give QWORD index into jump table
	   03
 00000173  48/ 8D 05					LEA				RAX, @jt					; address of jump table
	   00000180 R
 0000017A  4C/ 03 C0					ADD				R8, RAX						; add index
 0000017D  41/ FF 20					JMP				Q_PTR [ R8 ]				; jump to routine that shifts the appropriate Nr words
 00000180			@jt:
 00000180  00000000000001FD R				QWORD			@@E, @1, @2, @3, @4, @5, @6, @7
	   00000000000001C0 R
	   00000000000001C9 R
	   00000000000001D2 R
	   00000000000001DB R
	   00000000000001E4 R
	   00000000000001ED R
	   00000000000001F6 R
				;			Do the shifts of multiples of 64 bits (words)
 000001C0  62 03 9D 40/ 03	@1:			VALIGNQ			ZMM31, ZMM28, ZMM31, 1
	   FF 01
 000001C7  EB 34					JMP				@@E
 000001C9  62 03 9D 40/ 03	@2:			VALIGNQ			ZMM31, ZMM28, ZMM31, 2
	   FF 02
 000001D0  EB 2B					JMP				@@E
 000001D2  62 03 9D 40/ 03	@3:			VALIGNQ			ZMM31, ZMM28, ZMM31, 3
	   FF 03
 000001D9  EB 22					JMP				@@E
 000001DB  62 03 9D 40/ 03	@4:			VALIGNQ			ZMM31, ZMM28, ZMM31, 4
	   FF 04
 000001E2  EB 19					JMP				@@E
 000001E4  62 03 9D 40/ 03	@5:			VALIGNQ			ZMM31, ZMM28, ZMM31, 5
	   FF 05
 000001EB  EB 10					JMP				@@E
 000001ED  62 03 9D 40/ 03	@6:			VALIGNQ			ZMM31, ZMM28, ZMM31, 6
	   FF 06
 000001F4  EB 07					JMP				@@E
 000001F6  62 03 9D 40/ 03	@7:			VALIGNQ			ZMM31, ZMM28, ZMM31, 7
	   FF 07

 000001FD  62 61 FD 48/ 7F	@@E:		VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
					ELSE
					ENDIF
 00000203			shl_u_ret:
 00000203  C3						RET	
 00000204			shl_u		ENDP

				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;			and_u		-	logical 'AND' bits in lh_op, rh_op, put result in destination
				;			Prototype:		void and_u( u64* destination, u64* lh_op, u64* rh_op);
				;			destination	-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RCX)
				;			lh_op		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RDX)
				;			rh_op		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in R8)
				;			returns		-	nothing (0)
 00000204			and_u		PROC			PUBLIC 
					IF		__UseZ		
 00000204  62 61 FD 48/ 6F				VMOVDQA64		ZMM31, ZM_PTR [ RDX ]			
	   3A
 0000020A  62 41 85 40/ DB				VPANDQ			ZMM31, ZMM31, ZM_PTR [ R8 ]
	   38
 00000210  62 61 FD 48/ 7F				VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
					ELSEIF	__UseY
					ENDIF
 00000216  C3						RET		
 00000217			and_u		ENDP

				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;			or_u		-	logical 'OR' bits in lh_op, rh_op, put result in destination
				;			Prototype:		void or_u( u64* destination, u64* lh_op, u64* rh_op);
				;			destination	-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RCX)
				;			lh_op		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RDX)
				;			rh_op		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in R8)
				;			returns		-	nothing (0)

 00000217			or_u		PROC			PUBLIC
					IF		__UseZ		
 00000217  62 61 FD 48/ 6F				VMOVDQA64		ZMM31, ZM_PTR [ RDX ]			
	   3A
 0000021D  62 41 85 40/ EB				VPORQ			ZMM31, ZMM31, ZM_PTR [ R8 ]
	   38
 00000223  62 61 FD 48/ 7F				VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
					ELSEIF	__UseY
					ENDIF
 00000229  C3						RET 
 0000022A			or_u		ENDP

				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;			not_u		-	logical 'NOT' bits in source, put result in destination
				;			Prototype:		void not_u( u64* destination, u64* source);
				;			destination	-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RCX)
				;			source		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RDX)
				;			returns		-	nothing (0)

 0000022A			not_u		PROC			PUBLIC
					IF		__UseZ	
 0000022A  62 61 FD 48/ 6F				VMOVDQA64		ZMM31, ZM_PTR [RDX]			
	   3A
 00000230  62 61 85 40/ DF				VPANDNQ			ZMM31, ZMM31, qOnes			; qOnes (declared in the data section of this module) is 8 QWORDS, binary all ones
	   3D 00000000 R
 0000023A  62 61 FD 48/ 7F				VMOVDQA64		ZM_PTR [RCX], ZMM31
	   39
					ELSEIF	__UseY
					ENDIF
 00000240  C3						RET	
 00000241			not_u		ENDP

				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;			msb_u		-	find most significant bit in supplied source 512bit (8 QWORDS)
				;			Prototype:		s16 msb_u( u64* source );
				;			source		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RCX)
				;			returns		-	-1 if no most significant bit, bit number otherwise, bits numbered 0 to 511 inclusive

							OPTION			PROLOGUE:none
							OPTION			EPILOGUE:none
 00000241			msb_u		PROC			PUBLIC
 00000241  41/ 51					PUSH			R9							; Save (and later restore) R9, R10
 00000243  41/ 52					PUSH			R10
 00000245  49/ C7 C2					MOV				R10, -1						; Initialize loop counter (and index)
	   FFFFFFFF
 0000024C			@@NextWord:
 0000024C  41/ FF C2					INC				R10D
 0000024F  41/ 83 FA 08					CMP				R10D, 8
 00000253  75 07					JNZ				@F							; Loop through values 0 to 7, then exit
 00000255  B8 FFFFFFFF					MOV				EAX, -1
 0000025A  EB 17					JMP				@@Finished
 0000025C			@@:
 0000025C  4A/ 0F BD 04 D1				BSR				RAX, [ RCX ]  + [ R10 * 8 ]	; Reverse Scan indexed word for significant bit
 00000261  74 E9					JZ				@@NextWord					; None found, loop to next word
 00000263  41/ BB					MOV				R11D, 7
	   00000007
 00000269  45/ 2B DA					SUB				R11D, R10D					; calculate seven minus the word index (which word has the msb?)
 0000026C  41/ C1 E3 06					SHL				R11D, 6						; times 64 for each word
 00000270  41/ 03 C3					ADD				EAX, R11D					; plus the BSR found bit position within the word yields the bit position within the 512 bit source
 00000273			@@Finished:
 00000273  41/ 5A					POP				R10
 00000275  41/ 59					POP				R9
 00000277  C3						RET		
 00000278			msb_u		ENDP

				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;			lsb_u		-	find least significant bit in supplied source 512bit (8 QWORDS)
				;			Prototype:		s16 lsb_u( u64* source );
				;			source		-	Address of 64 byte alligned array of 8 64-bit words (QWORDS) 512 bits (in RCX)
				;			returns		-	-1 if no least significant bit, bit number otherwise, bits numbered 0 to 511 inclusive

							OPTION			PROLOGUE:none
							OPTION			EPILOGUE:none
 00000278			lsb_u		PROC			PUBLIC
 00000278  41/ 51					PUSH			R9							; Save (and later restore) R9, R10
 0000027A  41/ 52					PUSH			R10
 0000027C  49/ C7 C2					MOV				R10, 8						; Initialize loop counter (and index)
	   00000008
 00000283			@@NextWord:
 00000283  49/ FF CA					DEC				R10
 00000286  73 07					JNC				@F							; Loop through values 7 to 0, then exit
 00000288  B8 FFFFFFFF					MOV				EAX, -1
 0000028D  EB 17					JMP				@@Finished
 0000028F			@@:
 0000028F  4A/ 0F BC 04 D1				BSF				RAX, [ RCX ] + [ R10 * 8 ]	; Scan indexed word for significant bit
 00000294  74 ED					JZ				@@NextWord					; None found, loop to next word
 00000296  41/ BB					MOV				R11D, 7						;  
	   00000007
 0000029C  45/ 2B DA					SUB				R11D, R10D					; calculate seven minus the word index (which word has the msb?)
 0000029F  41/ C1 E3 06					SHL				R11D, 6						; times 64 for each word
 000002A3  41/ 03 C3					ADD				EAX, R11D					; plus the BSF found bit position within the word yields the bit position within the 512 bit source
 000002A6			@@Finished:
 000002A6  41/ 5A					POP				R10
 000002A8  41/ 59					POP				R9
 000002AA  C3						RET
 000002AB			lsb_u		ENDP

							END
Microsoft (R) Macro Assembler (x64) Version 14.42.34436.0   02/07/25 10:08:53
ui512b.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

Copy512  . . . . . . . . . . . .	Proc
Zero512  . . . . . . . . . . . .	Proc


Segments:

                N a m e                  Length   Align   Class

CONST  . . . . . . . . . . . . .	 00000000 16	  'CONST'	 ReadOnly
aligned64  . . . . . . . . . . .	 00000040 64	  
ui512b . . . . . . . . . . . . .	 000002AB 16	  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

and_u  . . . . . . . . . . . . .	P 	 00000204 ui512b	Length= 00000013 Public
lsb_u  . . . . . . . . . . . . .	P 	 00000278 ui512b	Length= 00000033 Public
  @@NextWord . . . . . . . . . .	L 	 00000283 ui512b	
  @@Finished . . . . . . . . . .	L 	 000002A6 ui512b	
msb_u  . . . . . . . . . . . . .	P 	 00000241 ui512b	Length= 00000037 Public
  @@NextWord . . . . . . . . . .	L 	 0000024C ui512b	
  @@Finished . . . . . . . . . .	L 	 00000273 ui512b	
not_u  . . . . . . . . . . . . .	P 	 0000022A ui512b	Length= 00000017 Public
or_u . . . . . . . . . . . . . .	P 	 00000217 ui512b	Length= 00000013 Public
shl_u  . . . . . . . . . . . . .	P 	 00000102 ui512b	Length= 00000102 Public
  @jt  . . . . . . . . . . . . .	L 	 00000180 ui512b	
  @1 . . . . . . . . . . . . . .	L 	 000001C0 ui512b	
  @2 . . . . . . . . . . . . . .	L 	 000001C9 ui512b	
  @3 . . . . . . . . . . . . . .	L 	 000001D2 ui512b	
  @4 . . . . . . . . . . . . . .	L 	 000001DB ui512b	
  @5 . . . . . . . . . . . . . .	L 	 000001E4 ui512b	
  @6 . . . . . . . . . . . . . .	L 	 000001ED ui512b	
  @7 . . . . . . . . . . . . . .	L 	 000001F6 ui512b	
  @@E  . . . . . . . . . . . . .	L 	 000001FD ui512b	
  shl_u_ret  . . . . . . . . . .	L 	 00000203 ui512b	
shr_u  . . . . . . . . . . . . .	P 	 00000000 ui512b	Length= 00000102 Public
  @jt  . . . . . . . . . . . . .	L 	 0000007E ui512b	
  @1 . . . . . . . . . . . . . .	L 	 000000BE ui512b	
  @2 . . . . . . . . . . . . . .	L 	 000000C7 ui512b	
  @3 . . . . . . . . . . . . . .	L 	 000000D0 ui512b	
  @4 . . . . . . . . . . . . . .	L 	 000000D9 ui512b	
  @5 . . . . . . . . . . . . . .	L 	 000000E2 ui512b	
  @6 . . . . . . . . . . . . . .	L 	 000000EB ui512b	
  @7 . . . . . . . . . . . . . .	L 	 000000F4 ui512b	
  @@E  . . . . . . . . . . . . .	L 	 000000FB ui512b	
  @@shr_u_ret  . . . . . . . . .	L 	 00000101 ui512b	


Symbols:

                N a m e                 Type     Value    Attr

B_PTR  . . . . . . . . . . . . .	Text   	 BYTE PTR
CPEQ . . . . . . . . . . . . . .	Number	 00000000h   
CPGE . . . . . . . . . . . . . .	Number	 00000005h   
CPGT . . . . . . . . . . . . . .	Number	 00000006h   
CPLE . . . . . . . . . . . . . .	Number	 00000002h   
CPLT . . . . . . . . . . . . . .	Number	 00000001h   
CPNE . . . . . . . . . . . . . .	Number	 00000004h   
D_PTR  . . . . . . . . . . . . .	Text   	 DWORD PTR
Q_PTR  . . . . . . . . . . . . .	Text   	 QWORD PTR
W_PTR  . . . . . . . . . . . . .	Text   	 WORD PTR
XM_PTR . . . . . . . . . . . . .	Text   	 XMMWORD PTR
YM_PTR . . . . . . . . . . . . .	Text   	 YMMWORD PTR
ZM_PTR . . . . . . . . . . . . .	Text   	 ZMMWORD PTR
__UseQ . . . . . . . . . . . . .	Number	 00000000h   
__UseX . . . . . . . . . . . . .	Number	 00000000h   
__UseY . . . . . . . . . . . . .	Number	 00000000h   
__UseZ . . . . . . . . . . . . .	Number	 00000001h   
add_uT64 . . . . . . . . . . . .	L 	 00000000 External
add_u  . . . . . . . . . . . . .	L 	 00000000 External
compare_uT64 . . . . . . . . . .	L 	 00000000 External
compare_u  . . . . . . . . . . .	L 	 00000000 External
copy_u . . . . . . . . . . . . .	L 	 00000000 External
m32BCST  . . . . . . . . . . . .	Text   	 DWORD BCST
m64BCST  . . . . . . . . . . . .	Text   	 QWORD BCST
qOnes  . . . . . . . . . . . . .	QWord	 00000000 aligned64	
set_uT64 . . . . . . . . . . . .	L 	 00000000 External
sub_uT64 . . . . . . . . . . . .	L 	 00000000 External
sub_u  . . . . . . . . . . . . .	L 	 00000000 External
ui512aMacros_INC . . . . . . . .	Text   	 1
ui512bMacros_INC . . . . . . . .	Text   	 1
zero_u . . . . . . . . . . . . .	L 	 00000000 External

	   0 Warnings
	   0 Errors
